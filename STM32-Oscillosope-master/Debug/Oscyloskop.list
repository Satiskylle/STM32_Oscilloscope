
Oscyloskop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e70  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b8  080047b8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047c0  080047c0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080047c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000014  080047dc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080047dc  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b183  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020f2  00000000  00000000  0002b1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000950  00000000  00000000  0002d2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000810  00000000  00000000  0002dc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ad8  00000000  00000000  0002e420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a330  00000000  00000000  00051ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4952  00000000  00000000  0005c228  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00130b7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002438  00000000  00000000  00130bf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004008 	.word	0x08004008

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08004008 	.word	0x08004008

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295
 80009f0:	f000 b972 	b.w	8000cd8 <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9e08      	ldr	r6, [sp, #32]
 8000a12:	4604      	mov	r4, r0
 8000a14:	4688      	mov	r8, r1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d14b      	bne.n	8000ab2 <__udivmoddi4+0xa6>
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	4615      	mov	r5, r2
 8000a1e:	d967      	bls.n	8000af0 <__udivmoddi4+0xe4>
 8000a20:	fab2 f282 	clz	r2, r2
 8000a24:	b14a      	cbz	r2, 8000a3a <__udivmoddi4+0x2e>
 8000a26:	f1c2 0720 	rsb	r7, r2, #32
 8000a2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a32:	4095      	lsls	r5, r2
 8000a34:	ea47 0803 	orr.w	r8, r7, r3
 8000a38:	4094      	lsls	r4, r2
 8000a3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a3e:	0c23      	lsrs	r3, r4, #16
 8000a40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a44:	fa1f fc85 	uxth.w	ip, r5
 8000a48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a50:	fb07 f10c 	mul.w	r1, r7, ip
 8000a54:	4299      	cmp	r1, r3
 8000a56:	d909      	bls.n	8000a6c <__udivmoddi4+0x60>
 8000a58:	18eb      	adds	r3, r5, r3
 8000a5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a5e:	f080 811b 	bcs.w	8000c98 <__udivmoddi4+0x28c>
 8000a62:	4299      	cmp	r1, r3
 8000a64:	f240 8118 	bls.w	8000c98 <__udivmoddi4+0x28c>
 8000a68:	3f02      	subs	r7, #2
 8000a6a:	442b      	add	r3, r5
 8000a6c:	1a5b      	subs	r3, r3, r1
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a80:	45a4      	cmp	ip, r4
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x8c>
 8000a84:	192c      	adds	r4, r5, r4
 8000a86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a8a:	f080 8107 	bcs.w	8000c9c <__udivmoddi4+0x290>
 8000a8e:	45a4      	cmp	ip, r4
 8000a90:	f240 8104 	bls.w	8000c9c <__udivmoddi4+0x290>
 8000a94:	3802      	subs	r0, #2
 8000a96:	442c      	add	r4, r5
 8000a98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a9c:	eba4 040c 	sub.w	r4, r4, ip
 8000aa0:	2700      	movs	r7, #0
 8000aa2:	b11e      	cbz	r6, 8000aac <__udivmoddi4+0xa0>
 8000aa4:	40d4      	lsrs	r4, r2
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e9c6 4300 	strd	r4, r3, [r6]
 8000aac:	4639      	mov	r1, r7
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	428b      	cmp	r3, r1
 8000ab4:	d909      	bls.n	8000aca <__udivmoddi4+0xbe>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	f000 80eb 	beq.w	8000c92 <__udivmoddi4+0x286>
 8000abc:	2700      	movs	r7, #0
 8000abe:	e9c6 0100 	strd	r0, r1, [r6]
 8000ac2:	4638      	mov	r0, r7
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	fab3 f783 	clz	r7, r3
 8000ace:	2f00      	cmp	r7, #0
 8000ad0:	d147      	bne.n	8000b62 <__udivmoddi4+0x156>
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d302      	bcc.n	8000adc <__udivmoddi4+0xd0>
 8000ad6:	4282      	cmp	r2, r0
 8000ad8:	f200 80fa 	bhi.w	8000cd0 <__udivmoddi4+0x2c4>
 8000adc:	1a84      	subs	r4, r0, r2
 8000ade:	eb61 0303 	sbc.w	r3, r1, r3
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	4698      	mov	r8, r3
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d0e0      	beq.n	8000aac <__udivmoddi4+0xa0>
 8000aea:	e9c6 4800 	strd	r4, r8, [r6]
 8000aee:	e7dd      	b.n	8000aac <__udivmoddi4+0xa0>
 8000af0:	b902      	cbnz	r2, 8000af4 <__udivmoddi4+0xe8>
 8000af2:	deff      	udf	#255	; 0xff
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	f040 808f 	bne.w	8000c1c <__udivmoddi4+0x210>
 8000afe:	1b49      	subs	r1, r1, r5
 8000b00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b04:	fa1f f885 	uxth.w	r8, r5
 8000b08:	2701      	movs	r7, #1
 8000b0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b18:	fb08 f10c 	mul.w	r1, r8, ip
 8000b1c:	4299      	cmp	r1, r3
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x124>
 8000b20:	18eb      	adds	r3, r5, r3
 8000b22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x122>
 8000b28:	4299      	cmp	r1, r3
 8000b2a:	f200 80cd 	bhi.w	8000cc8 <__udivmoddi4+0x2bc>
 8000b2e:	4684      	mov	ip, r0
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	b2a3      	uxth	r3, r4
 8000b34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b40:	fb08 f800 	mul.w	r8, r8, r0
 8000b44:	45a0      	cmp	r8, r4
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x14c>
 8000b48:	192c      	adds	r4, r5, r4
 8000b4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x14a>
 8000b50:	45a0      	cmp	r8, r4
 8000b52:	f200 80b6 	bhi.w	8000cc2 <__udivmoddi4+0x2b6>
 8000b56:	4618      	mov	r0, r3
 8000b58:	eba4 0408 	sub.w	r4, r4, r8
 8000b5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b60:	e79f      	b.n	8000aa2 <__udivmoddi4+0x96>
 8000b62:	f1c7 0c20 	rsb	ip, r7, #32
 8000b66:	40bb      	lsls	r3, r7
 8000b68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b70:	fa01 f407 	lsl.w	r4, r1, r7
 8000b74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b80:	4325      	orrs	r5, r4
 8000b82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b86:	0c2c      	lsrs	r4, r5, #16
 8000b88:	fb08 3319 	mls	r3, r8, r9, r3
 8000b8c:	fa1f fa8e 	uxth.w	sl, lr
 8000b90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b94:	fb09 f40a 	mul.w	r4, r9, sl
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000b9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ba2:	d90b      	bls.n	8000bbc <__udivmoddi4+0x1b0>
 8000ba4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ba8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bac:	f080 8087 	bcs.w	8000cbe <__udivmoddi4+0x2b2>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f240 8084 	bls.w	8000cbe <__udivmoddi4+0x2b2>
 8000bb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bba:	4473      	add	r3, lr
 8000bbc:	1b1b      	subs	r3, r3, r4
 8000bbe:	b2ad      	uxth	r5, r5
 8000bc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bcc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bd0:	45a2      	cmp	sl, r4
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x1da>
 8000bd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bdc:	d26b      	bcs.n	8000cb6 <__udivmoddi4+0x2aa>
 8000bde:	45a2      	cmp	sl, r4
 8000be0:	d969      	bls.n	8000cb6 <__udivmoddi4+0x2aa>
 8000be2:	3802      	subs	r0, #2
 8000be4:	4474      	add	r4, lr
 8000be6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bea:	fba0 8902 	umull	r8, r9, r0, r2
 8000bee:	eba4 040a 	sub.w	r4, r4, sl
 8000bf2:	454c      	cmp	r4, r9
 8000bf4:	46c2      	mov	sl, r8
 8000bf6:	464b      	mov	r3, r9
 8000bf8:	d354      	bcc.n	8000ca4 <__udivmoddi4+0x298>
 8000bfa:	d051      	beq.n	8000ca0 <__udivmoddi4+0x294>
 8000bfc:	2e00      	cmp	r6, #0
 8000bfe:	d069      	beq.n	8000cd4 <__udivmoddi4+0x2c8>
 8000c00:	ebb1 050a 	subs.w	r5, r1, sl
 8000c04:	eb64 0403 	sbc.w	r4, r4, r3
 8000c08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c0c:	40fd      	lsrs	r5, r7
 8000c0e:	40fc      	lsrs	r4, r7
 8000c10:	ea4c 0505 	orr.w	r5, ip, r5
 8000c14:	e9c6 5400 	strd	r5, r4, [r6]
 8000c18:	2700      	movs	r7, #0
 8000c1a:	e747      	b.n	8000aac <__udivmoddi4+0xa0>
 8000c1c:	f1c2 0320 	rsb	r3, r2, #32
 8000c20:	fa20 f703 	lsr.w	r7, r0, r3
 8000c24:	4095      	lsls	r5, r2
 8000c26:	fa01 f002 	lsl.w	r0, r1, r2
 8000c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c32:	4338      	orrs	r0, r7
 8000c34:	0c01      	lsrs	r1, r0, #16
 8000c36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c3a:	fa1f f885 	uxth.w	r8, r5
 8000c3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c46:	fb07 f308 	mul.w	r3, r7, r8
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x256>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c58:	d22f      	bcs.n	8000cba <__udivmoddi4+0x2ae>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d92d      	bls.n	8000cba <__udivmoddi4+0x2ae>
 8000c5e:	3f02      	subs	r7, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1acb      	subs	r3, r1, r3
 8000c64:	b281      	uxth	r1, r0
 8000c66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c72:	fb00 f308 	mul.w	r3, r0, r8
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x27e>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c80:	d217      	bcs.n	8000cb2 <__udivmoddi4+0x2a6>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d915      	bls.n	8000cb2 <__udivmoddi4+0x2a6>
 8000c86:	3802      	subs	r0, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1ac9      	subs	r1, r1, r3
 8000c8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c90:	e73b      	b.n	8000b0a <__udivmoddi4+0xfe>
 8000c92:	4637      	mov	r7, r6
 8000c94:	4630      	mov	r0, r6
 8000c96:	e709      	b.n	8000aac <__udivmoddi4+0xa0>
 8000c98:	4607      	mov	r7, r0
 8000c9a:	e6e7      	b.n	8000a6c <__udivmoddi4+0x60>
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	e6fb      	b.n	8000a98 <__udivmoddi4+0x8c>
 8000ca0:	4541      	cmp	r1, r8
 8000ca2:	d2ab      	bcs.n	8000bfc <__udivmoddi4+0x1f0>
 8000ca4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ca8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cac:	3801      	subs	r0, #1
 8000cae:	4613      	mov	r3, r2
 8000cb0:	e7a4      	b.n	8000bfc <__udivmoddi4+0x1f0>
 8000cb2:	4660      	mov	r0, ip
 8000cb4:	e7e9      	b.n	8000c8a <__udivmoddi4+0x27e>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	e795      	b.n	8000be6 <__udivmoddi4+0x1da>
 8000cba:	4667      	mov	r7, ip
 8000cbc:	e7d1      	b.n	8000c62 <__udivmoddi4+0x256>
 8000cbe:	4681      	mov	r9, r0
 8000cc0:	e77c      	b.n	8000bbc <__udivmoddi4+0x1b0>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	442c      	add	r4, r5
 8000cc6:	e747      	b.n	8000b58 <__udivmoddi4+0x14c>
 8000cc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ccc:	442b      	add	r3, r5
 8000cce:	e72f      	b.n	8000b30 <__udivmoddi4+0x124>
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	e708      	b.n	8000ae6 <__udivmoddi4+0xda>
 8000cd4:	4637      	mov	r7, r6
 8000cd6:	e6e9      	b.n	8000aac <__udivmoddi4+0xa0>

08000cd8 <__aeabi_idiv0>:
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 fd25 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f003 f884 	bl	8003e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fd3d 	bl	80017be <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 fd05 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000010 	.word	0x20000010
 8000d78:	20000004 	.word	0x20000004
 8000d7c:	20000000 	.word	0x20000000

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000004 	.word	0x20000004
 8000da4:	2000008c 	.word	0x2000008c

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000008c 	.word	0x2000008c

08000dc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e033      	b.n	8000e3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d109      	bne.n	8000df2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f001 ff36 	bl	8002c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d118      	bne.n	8000e30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e06:	f023 0302 	bic.w	r3, r3, #2
 8000e0a:	f043 0202 	orr.w	r2, r3, #2
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 fa50 	bl	80012b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f023 0303 	bic.w	r3, r3, #3
 8000e26:	f043 0201 	orr.w	r2, r3, #1
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e2e:	e001      	b.n	8000e34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d101      	bne.n	8000e66 <HAL_ADC_Start_DMA+0x1e>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e0cc      	b.n	8001000 <HAL_ADC_Start_DMA+0x1b8>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d018      	beq.n	8000eae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0201 	orr.w	r2, r2, #1
 8000e8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e8c:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <HAL_ADC_Start_DMA+0x1c0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a5e      	ldr	r2, [pc, #376]	; (800100c <HAL_ADC_Start_DMA+0x1c4>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	0c9a      	lsrs	r2, r3, #18
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000ea0:	e002      	b.n	8000ea8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f9      	bne.n	8000ea2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	f040 80a0 	bne.w	8000ffe <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d007      	beq.n	8000ef0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000efc:	d106      	bne.n	8000f0c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f023 0206 	bic.w	r2, r3, #6
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	645a      	str	r2, [r3, #68]	; 0x44
 8000f0a:	e002      	b.n	8000f12 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f1a:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <HAL_ADC_Start_DMA+0x1c8>)
 8000f1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f22:	4a3c      	ldr	r2, [pc, #240]	; (8001014 <HAL_ADC_Start_DMA+0x1cc>)
 8000f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2a:	4a3b      	ldr	r2, [pc, #236]	; (8001018 <HAL_ADC_Start_DMA+0x1d0>)
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	4a3a      	ldr	r2, [pc, #232]	; (800101c <HAL_ADC_Start_DMA+0x1d4>)
 8000f34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000f4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	334c      	adds	r3, #76	; 0x4c
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f000 fce0 	bl	8001934 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d12a      	bne.n	8000fd6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a26      	ldr	r2, [pc, #152]	; (8001020 <HAL_ADC_Start_DMA+0x1d8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d015      	beq.n	8000fb6 <HAL_ADC_Start_DMA+0x16e>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a25      	ldr	r2, [pc, #148]	; (8001024 <HAL_ADC_Start_DMA+0x1dc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d105      	bne.n	8000fa0 <HAL_ADC_Start_DMA+0x158>
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_ADC_Start_DMA+0x1c8>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00a      	beq.n	8000fb6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a20      	ldr	r2, [pc, #128]	; (8001028 <HAL_ADC_Start_DMA+0x1e0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d129      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_ADC_Start_DMA+0x1c8>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	d823      	bhi.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d11c      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	e013      	b.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_ADC_Start_DMA+0x1d8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d10e      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ffc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000010 	.word	0x20000010
 800100c:	431bde83 	.word	0x431bde83
 8001010:	40012300 	.word	0x40012300
 8001014:	080014b1 	.word	0x080014b1
 8001018:	0800156b 	.word	0x0800156b
 800101c:	08001587 	.word	0x08001587
 8001020:	40012000 	.word	0x40012000
 8001024:	40012100 	.word	0x40012100
 8001028:	40012200 	.word	0x40012200

0800102c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x1c>
 800106c:	2302      	movs	r3, #2
 800106e:	e113      	b.n	8001298 <HAL_ADC_ConfigChannel+0x244>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b09      	cmp	r3, #9
 800107e:	d925      	bls.n	80010cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68d9      	ldr	r1, [r3, #12]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	3b1e      	subs	r3, #30
 8001096:	2207      	movs	r2, #7
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43da      	mvns	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	400a      	ands	r2, r1
 80010a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68d9      	ldr	r1, [r3, #12]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	4603      	mov	r3, r0
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4403      	add	r3, r0
 80010be:	3b1e      	subs	r3, #30
 80010c0:	409a      	lsls	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	e022      	b.n	8001112 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6919      	ldr	r1, [r3, #16]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	2207      	movs	r2, #7
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	400a      	ands	r2, r1
 80010ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6919      	ldr	r1, [r3, #16]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	4603      	mov	r3, r0
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4403      	add	r3, r0
 8001108:	409a      	lsls	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b06      	cmp	r3, #6
 8001118:	d824      	bhi.n	8001164 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	3b05      	subs	r3, #5
 800112c:	221f      	movs	r2, #31
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	400a      	ands	r2, r1
 800113a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	3b05      	subs	r3, #5
 8001156:	fa00 f203 	lsl.w	r2, r0, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
 8001162:	e04c      	b.n	80011fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d824      	bhi.n	80011b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	3b23      	subs	r3, #35	; 0x23
 800117e:	221f      	movs	r2, #31
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43da      	mvns	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	400a      	ands	r2, r1
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	3b23      	subs	r3, #35	; 0x23
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
 80011b4:	e023      	b.n	80011fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	3b41      	subs	r3, #65	; 0x41
 80011c8:	221f      	movs	r2, #31
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	400a      	ands	r2, r1
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3b41      	subs	r3, #65	; 0x41
 80011f2:	fa00 f203 	lsl.w	r2, r0, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011fe:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <HAL_ADC_ConfigChannel+0x250>)
 8001200:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <HAL_ADC_ConfigChannel+0x254>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d10f      	bne.n	800122c <HAL_ADC_ConfigChannel+0x1d8>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b12      	cmp	r3, #18
 8001212:	d10b      	bne.n	800122c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <HAL_ADC_ConfigChannel+0x254>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d12b      	bne.n	800128e <HAL_ADC_ConfigChannel+0x23a>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <HAL_ADC_ConfigChannel+0x258>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d003      	beq.n	8001248 <HAL_ADC_ConfigChannel+0x1f4>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b11      	cmp	r3, #17
 8001246:	d122      	bne.n	800128e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <HAL_ADC_ConfigChannel+0x258>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d111      	bne.n	800128e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_ADC_ConfigChannel+0x25c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <HAL_ADC_ConfigChannel+0x260>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	0c9a      	lsrs	r2, r3, #18
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001280:	e002      	b.n	8001288 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3b01      	subs	r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f9      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40012300 	.word	0x40012300
 80012a8:	40012000 	.word	0x40012000
 80012ac:	10000012 	.word	0x10000012
 80012b0:	20000010 	.word	0x20000010
 80012b4:	431bde83 	.word	0x431bde83

080012b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012c0:	4b79      	ldr	r3, [pc, #484]	; (80014a8 <ADC_Init+0x1f0>)
 80012c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	431a      	orrs	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	021a      	lsls	r2, r3, #8
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001332:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6899      	ldr	r1, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	4a58      	ldr	r2, [pc, #352]	; (80014ac <ADC_Init+0x1f4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d022      	beq.n	8001396 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800135e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6899      	ldr	r1, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6899      	ldr	r1, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	e00f      	b.n	80013b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0202 	bic.w	r2, r2, #2
 80013c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6899      	ldr	r1, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7e1b      	ldrb	r3, [r3, #24]
 80013d0:	005a      	lsls	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d01b      	beq.n	800141c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001402:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6859      	ldr	r1, [r3, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	3b01      	subs	r3, #1
 8001410:	035a      	lsls	r2, r3, #13
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	e007      	b.n	800142c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800142a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	3b01      	subs	r3, #1
 8001448:	051a      	lsls	r2, r3, #20
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6899      	ldr	r1, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800146e:	025a      	lsls	r2, r3, #9
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6899      	ldr	r1, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	029a      	lsls	r2, r3, #10
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	609a      	str	r2, [r3, #8]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40012300 	.word	0x40012300
 80014ac:	0f000001 	.word	0x0f000001

080014b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d13c      	bne.n	8001544 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d12b      	bne.n	800153c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d127      	bne.n	800153c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001504:	2b00      	cmp	r3, #0
 8001506:	d119      	bne.n	800153c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0220 	bic.w	r2, r2, #32
 8001516:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d105      	bne.n	800153c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f002 fadb 	bl	8003af8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001542:	e00e      	b.n	8001562 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f7ff fd75 	bl	8001040 <HAL_ADC_ErrorCallback>
}
 8001556:	e004      	b.n	8001562 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	4798      	blx	r3
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7ff fd57 	bl	800102c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001592:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f043 0204 	orr.w	r2, r3, #4
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f7ff fd4a 	bl	8001040 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <__NVIC_EnableIRQ+0x38>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	; (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff8e 	bl	8001654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff29 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff3e 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff8e 	bl	80016a8 <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5d 	bl	8001654 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff31 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017e4:	f7ff fae0 	bl	8000da8 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e099      	b.n	8001928 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001814:	e00f      	b.n	8001836 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001816:	f7ff fac7 	bl	8000da8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b05      	cmp	r3, #5
 8001822:	d908      	bls.n	8001836 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2220      	movs	r2, #32
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e078      	b.n	8001928 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1e8      	bne.n	8001816 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_DMA_Init+0x158>)
 8001850:	4013      	ands	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001862:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4313      	orrs	r3, r2
 8001886:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	2b04      	cmp	r3, #4
 800188e:	d107      	bne.n	80018a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	4313      	orrs	r3, r2
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4313      	orrs	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f023 0307 	bic.w	r3, r3, #7
 80018b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4313      	orrs	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d117      	bne.n	80018fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00e      	beq.n	80018fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fa77 	bl	8001dd0 <DMA_CheckFifoParam>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2240      	movs	r2, #64	; 0x40
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018f6:	2301      	movs	r3, #1
 80018f8:	e016      	b.n	8001928 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fa2e 	bl	8001d64 <DMA_CalcBaseAndBitshift>
 8001908:	4603      	mov	r3, r0
 800190a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001910:	223f      	movs	r2, #63	; 0x3f
 8001912:	409a      	lsls	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	f010803f 	.word	0xf010803f

08001934 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_DMA_Start_IT+0x26>
 8001956:	2302      	movs	r3, #2
 8001958:	e048      	b.n	80019ec <HAL_DMA_Start_IT+0xb8>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b01      	cmp	r3, #1
 800196c:	d137      	bne.n	80019de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 f9c0 	bl	8001d08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198c:	223f      	movs	r2, #63	; 0x3f
 800198e:	409a      	lsls	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0216 	orr.w	r2, r2, #22
 80019a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019b2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0208 	orr.w	r2, r2, #8
 80019ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e005      	b.n	80019ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019e6:	2302      	movs	r3, #2
 80019e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a00:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <HAL_DMA_IRQHandler+0x258>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a92      	ldr	r2, [pc, #584]	; (8001c50 <HAL_DMA_IRQHandler+0x25c>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0a9b      	lsrs	r3, r3, #10
 8001a0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2208      	movs	r2, #8
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01a      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0204 	bic.w	r2, r2, #4
 8001a46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	2201      	movs	r2, #1
 8001a66:	409a      	lsls	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d012      	beq.n	8001a96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a82:	2201      	movs	r2, #1
 8001a84:	409a      	lsls	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f043 0202 	orr.w	r2, r3, #2
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d012      	beq.n	8001acc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00b      	beq.n	8001acc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	2204      	movs	r2, #4
 8001aba:	409a      	lsls	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac4:	f043 0204 	orr.w	r2, r3, #4
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d043      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d03c      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	2210      	movs	r2, #16
 8001af0:	409a      	lsls	r2, r3
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d018      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d108      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d024      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
 8001b22:	e01f      	b.n	8001b64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01b      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
 8001b34:	e016      	b.n	8001b64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d107      	bne.n	8001b54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0208 	bic.w	r2, r2, #8
 8001b52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b68:	2220      	movs	r2, #32
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 808e 	beq.w	8001c92 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8086 	beq.w	8001c92 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d136      	bne.n	8001c0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0216 	bic.w	r2, r2, #22
 8001bac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <HAL_DMA_IRQHandler+0x1da>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0208 	bic.w	r2, r2, #8
 8001bdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	223f      	movs	r2, #63	; 0x3f
 8001be4:	409a      	lsls	r2, r3
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d07d      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	4798      	blx	r3
        }
        return;
 8001c0a:	e078      	b.n	8001cfe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01c      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d108      	bne.n	8001c3a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d030      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4798      	blx	r3
 8001c38:	e02b      	b.n	8001c92 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d027      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	4798      	blx	r3
 8001c4a:	e022      	b.n	8001c92 <HAL_DMA_IRQHandler+0x29e>
 8001c4c:	20000010 	.word	0x20000010
 8001c50:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10f      	bne.n	8001c82 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0210 	bic.w	r2, r2, #16
 8001c70:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d032      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d022      	beq.n	8001cec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2205      	movs	r2, #5
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d307      	bcc.n	8001cda <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f2      	bne.n	8001cbe <HAL_DMA_IRQHandler+0x2ca>
 8001cd8:	e000      	b.n	8001cdc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001cda:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
 8001cfc:	e000      	b.n	8001d00 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cfe:	bf00      	nop
    }
  }
}
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop

08001d08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b40      	cmp	r3, #64	; 0x40
 8001d34:	d108      	bne.n	8001d48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d46:	e007      	b.n	8001d58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	3b10      	subs	r3, #16
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <DMA_CalcBaseAndBitshift+0x64>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d7e:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <DMA_CalcBaseAndBitshift+0x68>)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d909      	bls.n	8001da6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d9a:	f023 0303 	bic.w	r3, r3, #3
 8001d9e:	1d1a      	adds	r2, r3, #4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	659a      	str	r2, [r3, #88]	; 0x58
 8001da4:	e007      	b.n	8001db6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	aaaaaaab 	.word	0xaaaaaaab
 8001dcc:	08004034 	.word	0x08004034

08001dd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d11f      	bne.n	8001e2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d855      	bhi.n	8001e9c <DMA_CheckFifoParam+0xcc>
 8001df0:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <DMA_CheckFifoParam+0x28>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e09 	.word	0x08001e09
 8001dfc:	08001e1b 	.word	0x08001e1b
 8001e00:	08001e09 	.word	0x08001e09
 8001e04:	08001e9d 	.word	0x08001e9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d045      	beq.n	8001ea0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e18:	e042      	b.n	8001ea0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e22:	d13f      	bne.n	8001ea4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e28:	e03c      	b.n	8001ea4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e32:	d121      	bne.n	8001e78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d836      	bhi.n	8001ea8 <DMA_CheckFifoParam+0xd8>
 8001e3a:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <DMA_CheckFifoParam+0x70>)
 8001e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e40:	08001e51 	.word	0x08001e51
 8001e44:	08001e57 	.word	0x08001e57
 8001e48:	08001e51 	.word	0x08001e51
 8001e4c:	08001e69 	.word	0x08001e69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
      break;
 8001e54:	e02f      	b.n	8001eb6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d024      	beq.n	8001eac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e66:	e021      	b.n	8001eac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e70:	d11e      	bne.n	8001eb0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e76:	e01b      	b.n	8001eb0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d902      	bls.n	8001e84 <DMA_CheckFifoParam+0xb4>
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d003      	beq.n	8001e8a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e82:	e018      	b.n	8001eb6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
      break;
 8001e88:	e015      	b.n	8001eb6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00e      	beq.n	8001eb4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
      break;
 8001e9a:	e00b      	b.n	8001eb4 <DMA_CheckFifoParam+0xe4>
      break;
 8001e9c:	bf00      	nop
 8001e9e:	e00a      	b.n	8001eb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ea0:	bf00      	nop
 8001ea2:	e008      	b.n	8001eb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ea4:	bf00      	nop
 8001ea6:	e006      	b.n	8001eb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ea8:	bf00      	nop
 8001eaa:	e004      	b.n	8001eb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001eac:	bf00      	nop
 8001eae:	e002      	b.n	8001eb6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001eb0:	bf00      	nop
 8001eb2:	e000      	b.n	8001eb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001eb4:	bf00      	nop
    }
  } 
  
  return status; 
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	e177      	b.n	80021d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f040 8166 	bne.w	80021ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x4a>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d123      	bne.n	8001f56 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	69b9      	ldr	r1, [r7, #24]
 8001f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0203 	and.w	r2, r3, #3
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d00b      	beq.n	8001faa <HAL_GPIO_Init+0xe6>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d007      	beq.n	8001faa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f9e:	2b11      	cmp	r3, #17
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d130      	bne.n	800200c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 0201 	and.w	r2, r3, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80c0 	beq.w	80021ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <HAL_GPIO_Init+0x320>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a64      	ldr	r2, [pc, #400]	; (80021e4 <HAL_GPIO_Init+0x320>)
 8002054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b62      	ldr	r3, [pc, #392]	; (80021e4 <HAL_GPIO_Init+0x320>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002066:	4a60      	ldr	r2, [pc, #384]	; (80021e8 <HAL_GPIO_Init+0x324>)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	220f      	movs	r2, #15
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a57      	ldr	r2, [pc, #348]	; (80021ec <HAL_GPIO_Init+0x328>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d037      	beq.n	8002102 <HAL_GPIO_Init+0x23e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a56      	ldr	r2, [pc, #344]	; (80021f0 <HAL_GPIO_Init+0x32c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d031      	beq.n	80020fe <HAL_GPIO_Init+0x23a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a55      	ldr	r2, [pc, #340]	; (80021f4 <HAL_GPIO_Init+0x330>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02b      	beq.n	80020fa <HAL_GPIO_Init+0x236>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a54      	ldr	r2, [pc, #336]	; (80021f8 <HAL_GPIO_Init+0x334>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d025      	beq.n	80020f6 <HAL_GPIO_Init+0x232>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a53      	ldr	r2, [pc, #332]	; (80021fc <HAL_GPIO_Init+0x338>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01f      	beq.n	80020f2 <HAL_GPIO_Init+0x22e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a52      	ldr	r2, [pc, #328]	; (8002200 <HAL_GPIO_Init+0x33c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0x22a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a51      	ldr	r2, [pc, #324]	; (8002204 <HAL_GPIO_Init+0x340>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x226>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a50      	ldr	r2, [pc, #320]	; (8002208 <HAL_GPIO_Init+0x344>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x222>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4f      	ldr	r2, [pc, #316]	; (800220c <HAL_GPIO_Init+0x348>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x21e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4e      	ldr	r2, [pc, #312]	; (8002210 <HAL_GPIO_Init+0x34c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x21a>
 80020da:	2309      	movs	r3, #9
 80020dc:	e012      	b.n	8002104 <HAL_GPIO_Init+0x240>
 80020de:	230a      	movs	r3, #10
 80020e0:	e010      	b.n	8002104 <HAL_GPIO_Init+0x240>
 80020e2:	2308      	movs	r3, #8
 80020e4:	e00e      	b.n	8002104 <HAL_GPIO_Init+0x240>
 80020e6:	2307      	movs	r3, #7
 80020e8:	e00c      	b.n	8002104 <HAL_GPIO_Init+0x240>
 80020ea:	2306      	movs	r3, #6
 80020ec:	e00a      	b.n	8002104 <HAL_GPIO_Init+0x240>
 80020ee:	2305      	movs	r3, #5
 80020f0:	e008      	b.n	8002104 <HAL_GPIO_Init+0x240>
 80020f2:	2304      	movs	r3, #4
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x240>
 80020f6:	2303      	movs	r3, #3
 80020f8:	e004      	b.n	8002104 <HAL_GPIO_Init+0x240>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_Init+0x240>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_GPIO_Init+0x240>
 8002102:	2300      	movs	r3, #0
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	f002 0203 	and.w	r2, r2, #3
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	4093      	lsls	r3, r2
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002114:	4934      	ldr	r1, [pc, #208]	; (80021e8 <HAL_GPIO_Init+0x324>)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002122:	4b3c      	ldr	r3, [pc, #240]	; (8002214 <HAL_GPIO_Init+0x350>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002146:	4a33      	ldr	r2, [pc, #204]	; (8002214 <HAL_GPIO_Init+0x350>)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800214c:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_GPIO_Init+0x350>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002170:	4a28      	ldr	r2, [pc, #160]	; (8002214 <HAL_GPIO_Init+0x350>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002176:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_GPIO_Init+0x350>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <HAL_GPIO_Init+0x350>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_GPIO_Init+0x350>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c4:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_GPIO_Init+0x350>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3301      	adds	r3, #1
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	2b0f      	cmp	r3, #15
 80021d4:	f67f ae84 	bls.w	8001ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d8:	bf00      	nop
 80021da:	3724      	adds	r7, #36	; 0x24
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40020000 	.word	0x40020000
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40020800 	.word	0x40020800
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	40021000 	.word	0x40021000
 8002200:	40021400 	.word	0x40021400
 8002204:	40021800 	.word	0x40021800
 8002208:	40021c00 	.word	0x40021c00
 800220c:	40022000 	.word	0x40022000
 8002210:	40022400 	.word	0x40022400
 8002214:	40013c00 	.word	0x40013c00

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002234:	e003      	b.n	800223e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	041a      	lsls	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	619a      	str	r2, [r3, #24]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_PWREx_EnableOverDrive+0x90>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <HAL_PWREx_EnableOverDrive+0x90>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_PWREx_EnableOverDrive+0x90>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002278:	f7fe fd96 	bl	8000da8 <HAL_GetTick>
 800227c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800227e:	e009      	b.n	8002294 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002280:	f7fe fd92 	bl	8000da8 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800228e:	d901      	bls.n	8002294 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e01f      	b.n	80022d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a0:	d1ee      	bne.n	8002280 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a8:	f7fe fd7e 	bl	8000da8 <HAL_GetTick>
 80022ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022ae:	e009      	b.n	80022c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022b0:	f7fe fd7a 	bl	8000da8 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022be:	d901      	bls.n	80022c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e007      	b.n	80022d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022c4:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022d0:	d1ee      	bne.n	80022b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40023800 	.word	0x40023800
 80022e0:	420e0040 	.word	0x420e0040
 80022e4:	40007000 	.word	0x40007000
 80022e8:	420e0044 	.word	0x420e0044

080022ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e22d      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d075      	beq.n	80023f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800230a:	4ba3      	ldr	r3, [pc, #652]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d00c      	beq.n	8002330 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4ba0      	ldr	r3, [pc, #640]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231e:	2b08      	cmp	r3, #8
 8002320:	d112      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4b9d      	ldr	r3, [pc, #628]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232e:	d10b      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	4b99      	ldr	r3, [pc, #612]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d05b      	beq.n	80023f4 <HAL_RCC_OscConfig+0x108>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d157      	bne.n	80023f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e208      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x74>
 8002352:	4b91      	ldr	r3, [pc, #580]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a90      	ldr	r2, [pc, #576]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e01d      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x98>
 800236a:	4b8b      	ldr	r3, [pc, #556]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a8a      	ldr	r2, [pc, #552]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b88      	ldr	r3, [pc, #544]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a87      	ldr	r2, [pc, #540]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002384:	4b84      	ldr	r3, [pc, #528]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a83      	ldr	r2, [pc, #524]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800238a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b81      	ldr	r3, [pc, #516]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a80      	ldr	r2, [pc, #512]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fd00 	bl	8000da8 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ac:	f7fe fcfc 	bl	8000da8 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e1cd      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0xc0>
 80023ca:	e014      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7fe fcec 	bl	8000da8 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d4:	f7fe fce8 	bl	8000da8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1b9      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	4b6c      	ldr	r3, [pc, #432]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0xe8>
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d063      	beq.n	80024ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002402:	4b65      	ldr	r3, [pc, #404]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b62      	ldr	r3, [pc, #392]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11c      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e18d      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b56      	ldr	r3, [pc, #344]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4952      	ldr	r1, [pc, #328]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e03a      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b4f      	ldr	r3, [pc, #316]	; (800259c <HAL_RCC_OscConfig+0x2b0>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fca1 	bl	8000da8 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246a:	f7fe fc9d 	bl	8000da8 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e16e      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b43      	ldr	r3, [pc, #268]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4940      	ldr	r1, [pc, #256]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b3f      	ldr	r3, [pc, #252]	; (800259c <HAL_RCC_OscConfig+0x2b0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fc80 	bl	8000da8 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ac:	f7fe fc7c 	bl	8000da8 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e14d      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d030      	beq.n	8002538 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <HAL_RCC_OscConfig+0x2b4>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7fe fc60 	bl	8000da8 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ec:	f7fe fc5c 	bl	8000da8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e12d      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x200>
 800250a:	e015      	b.n	8002538 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_RCC_OscConfig+0x2b4>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7fe fc49 	bl	8000da8 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251a:	f7fe fc45 	bl	8000da8 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e116      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800252e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f0      	bne.n	800251a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80a0 	beq.w	8002686 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10f      	bne.n	8002576 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a0e      	ldr	r2, [pc, #56]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002572:	2301      	movs	r3, #1
 8002574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_OscConfig+0x2b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d121      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_RCC_OscConfig+0x2b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <HAL_RCC_OscConfig+0x2b8>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258e:	f7fe fc0b 	bl	8000da8 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	e011      	b.n	80025ba <HAL_RCC_OscConfig+0x2ce>
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	42470000 	.word	0x42470000
 80025a0:	42470e80 	.word	0x42470e80
 80025a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a8:	f7fe fbfe 	bl	8000da8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0cf      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_OscConfig+0x478>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d106      	bne.n	80025dc <HAL_RCC_OscConfig+0x2f0>
 80025ce:	4b66      	ldr	r3, [pc, #408]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a65      	ldr	r2, [pc, #404]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
 80025da:	e01c      	b.n	8002616 <HAL_RCC_OscConfig+0x32a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d10c      	bne.n	80025fe <HAL_RCC_OscConfig+0x312>
 80025e4:	4b60      	ldr	r3, [pc, #384]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a5f      	ldr	r2, [pc, #380]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
 80025f0:	4b5d      	ldr	r3, [pc, #372]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a5c      	ldr	r2, [pc, #368]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	e00b      	b.n	8002616 <HAL_RCC_OscConfig+0x32a>
 80025fe:	4b5a      	ldr	r3, [pc, #360]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a59      	ldr	r2, [pc, #356]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
 800260a:	4b57      	ldr	r3, [pc, #348]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a56      	ldr	r2, [pc, #344]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d015      	beq.n	800264a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7fe fbc3 	bl	8000da8 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe fbbf 	bl	8000da8 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e08e      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ee      	beq.n	8002626 <HAL_RCC_OscConfig+0x33a>
 8002648:	e014      	b.n	8002674 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7fe fbad 	bl	8000da8 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7fe fba9 	bl	8000da8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e078      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	4b3f      	ldr	r3, [pc, #252]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ee      	bne.n	8002652 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d105      	bne.n	8002686 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a3a      	ldr	r2, [pc, #232]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 8002680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d064      	beq.n	8002758 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268e:	4b36      	ldr	r3, [pc, #216]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b08      	cmp	r3, #8
 8002698:	d05c      	beq.n	8002754 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d141      	bne.n	8002726 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b32      	ldr	r3, [pc, #200]	; (800276c <HAL_RCC_OscConfig+0x480>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7fe fb7e 	bl	8000da8 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe fb7a 	bl	8000da8 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e04b      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	4b29      	ldr	r3, [pc, #164]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	019b      	lsls	r3, r3, #6
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	3b01      	subs	r3, #1
 80026e8:	041b      	lsls	r3, r3, #16
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	491d      	ldr	r1, [pc, #116]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_RCC_OscConfig+0x480>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe fb53 	bl	8000da8 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002706:	f7fe fb4f 	bl	8000da8 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e020      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x41a>
 8002724:	e018      	b.n	8002758 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_OscConfig+0x480>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe fb3c 	bl	8000da8 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe fb38 	bl	8000da8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e009      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_RCC_OscConfig+0x47c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x448>
 8002752:	e001      	b.n	8002758 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40007000 	.word	0x40007000
 8002768:	40023800 	.word	0x40023800
 800276c:	42470060 	.word	0x42470060

08002770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0ca      	b.n	800291a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_RCC_ClockConfig+0x1b4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d90c      	bls.n	80027ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b64      	ldr	r3, [pc, #400]	; (8002924 <HAL_RCC_ClockConfig+0x1b4>)
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b62      	ldr	r3, [pc, #392]	; (8002924 <HAL_RCC_ClockConfig+0x1b4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b6      	b.n	800291a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c4:	4b58      	ldr	r3, [pc, #352]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a57      	ldr	r2, [pc, #348]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80027ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027dc:	4b52      	ldr	r3, [pc, #328]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80027e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	494c      	ldr	r1, [pc, #304]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d044      	beq.n	8002890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b46      	ldr	r3, [pc, #280]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d119      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07d      	b.n	800291a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d003      	beq.n	800282e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282a:	2b03      	cmp	r3, #3
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e06d      	b.n	800291a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e065      	b.n	800291a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4933      	ldr	r1, [pc, #204]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	4313      	orrs	r3, r2
 800285e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002860:	f7fe faa2 	bl	8000da8 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe fa9e 	bl	8000da8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e04d      	b.n	800291a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 020c 	and.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d1eb      	bne.n	8002868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_ClockConfig+0x1b4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d20c      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_RCC_ClockConfig+0x1b4>)
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_RCC_ClockConfig+0x1b4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e030      	b.n	800291a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4915      	ldr	r1, [pc, #84]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	490d      	ldr	r1, [pc, #52]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f6:	f000 f81d 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028fa:	4601      	mov	r1, r0
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	fa21 f303 	lsr.w	r3, r1, r3
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fe fa04 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023c00 	.word	0x40023c00
 8002928:	40023800 	.word	0x40023800
 800292c:	080047a8 	.word	0x080047a8
 8002930:	20000010 	.word	0x20000010

08002934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	2300      	movs	r3, #0
 8002944:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294a:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b04      	cmp	r3, #4
 8002954:	d007      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x32>
 8002956:	2b08      	cmp	r3, #8
 8002958:	d008      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x38>
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 80b4 	bne.w	8002ac8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002962:	60bb      	str	r3, [r7, #8]
       break;
 8002964:	e0b3      	b.n	8002ace <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002966:	4b5e      	ldr	r3, [pc, #376]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002968:	60bb      	str	r3, [r7, #8]
      break;
 800296a:	e0b0      	b.n	8002ace <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800296c:	4b5a      	ldr	r3, [pc, #360]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002974:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002976:	4b58      	ldr	r3, [pc, #352]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d04a      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002982:	4b55      	ldr	r3, [pc, #340]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	099b      	lsrs	r3, r3, #6
 8002988:	f04f 0400 	mov.w	r4, #0
 800298c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	ea03 0501 	and.w	r5, r3, r1
 8002998:	ea04 0602 	and.w	r6, r4, r2
 800299c:	4629      	mov	r1, r5
 800299e:	4632      	mov	r2, r6
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	f04f 0400 	mov.w	r4, #0
 80029a8:	0154      	lsls	r4, r2, #5
 80029aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029ae:	014b      	lsls	r3, r1, #5
 80029b0:	4619      	mov	r1, r3
 80029b2:	4622      	mov	r2, r4
 80029b4:	1b49      	subs	r1, r1, r5
 80029b6:	eb62 0206 	sbc.w	r2, r2, r6
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	f04f 0400 	mov.w	r4, #0
 80029c2:	0194      	lsls	r4, r2, #6
 80029c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029c8:	018b      	lsls	r3, r1, #6
 80029ca:	1a5b      	subs	r3, r3, r1
 80029cc:	eb64 0402 	sbc.w	r4, r4, r2
 80029d0:	f04f 0100 	mov.w	r1, #0
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	00e2      	lsls	r2, r4, #3
 80029da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029de:	00d9      	lsls	r1, r3, #3
 80029e0:	460b      	mov	r3, r1
 80029e2:	4614      	mov	r4, r2
 80029e4:	195b      	adds	r3, r3, r5
 80029e6:	eb44 0406 	adc.w	r4, r4, r6
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	0262      	lsls	r2, r4, #9
 80029f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029f8:	0259      	lsls	r1, r3, #9
 80029fa:	460b      	mov	r3, r1
 80029fc:	4614      	mov	r4, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	4621      	mov	r1, r4
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f04f 0400 	mov.w	r4, #0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	f7fd ffe6 	bl	80009dc <__aeabi_uldivmod>
 8002a10:	4603      	mov	r3, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e049      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a18:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	f04f 0400 	mov.w	r4, #0
 8002a22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	ea03 0501 	and.w	r5, r3, r1
 8002a2e:	ea04 0602 	and.w	r6, r4, r2
 8002a32:	4629      	mov	r1, r5
 8002a34:	4632      	mov	r2, r6
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	f04f 0400 	mov.w	r4, #0
 8002a3e:	0154      	lsls	r4, r2, #5
 8002a40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a44:	014b      	lsls	r3, r1, #5
 8002a46:	4619      	mov	r1, r3
 8002a48:	4622      	mov	r2, r4
 8002a4a:	1b49      	subs	r1, r1, r5
 8002a4c:	eb62 0206 	sbc.w	r2, r2, r6
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	f04f 0400 	mov.w	r4, #0
 8002a58:	0194      	lsls	r4, r2, #6
 8002a5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5e:	018b      	lsls	r3, r1, #6
 8002a60:	1a5b      	subs	r3, r3, r1
 8002a62:	eb64 0402 	sbc.w	r4, r4, r2
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	00e2      	lsls	r2, r4, #3
 8002a70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a74:	00d9      	lsls	r1, r3, #3
 8002a76:	460b      	mov	r3, r1
 8002a78:	4614      	mov	r4, r2
 8002a7a:	195b      	adds	r3, r3, r5
 8002a7c:	eb44 0406 	adc.w	r4, r4, r6
 8002a80:	f04f 0100 	mov.w	r1, #0
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	02a2      	lsls	r2, r4, #10
 8002a8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8e:	0299      	lsls	r1, r3, #10
 8002a90:	460b      	mov	r3, r1
 8002a92:	4614      	mov	r4, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	4621      	mov	r1, r4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f04f 0400 	mov.w	r4, #0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4623      	mov	r3, r4
 8002aa2:	f7fd ff9b 	bl	80009dc <__aeabi_uldivmod>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	460c      	mov	r4, r1
 8002aaa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac4:	60bb      	str	r3, [r7, #8]
      break;
 8002ac6:	e002      	b.n	8002ace <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002aca:	60bb      	str	r3, [r7, #8]
      break;
 8002acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ace:	68bb      	ldr	r3, [r7, #8]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	007a1200 	.word	0x007a1200

08002ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e056      	b.n	8002ba4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d106      	bne.n	8002b16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f001 f907 	bl	8003d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b2c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	ea42 0103 	orr.w	r1, r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	0c1b      	lsrs	r3, r3, #16
 8002b74:	f003 0104 	and.w	r1, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002bbe:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002bc0:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <MX_ADC1_Init+0x9c>)
 8002bc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002bc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bde:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002bee:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <MX_ADC1_Init+0xa0>)
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c0c:	480d      	ldr	r0, [pc, #52]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002c0e:	f7fe f8d7 	bl	8000dc0 <HAL_ADC_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c18:	f001 f846 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002c1c:	2307      	movs	r3, #7
 8002c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c20:	2301      	movs	r3, #1
 8002c22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c28:	463b      	mov	r3, r7
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_ADC1_Init+0x98>)
 8002c2e:	f7fe fa11 	bl	8001054 <HAL_ADC_ConfigChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c38:	f001 f836 	bl	8003ca8 <Error_Handler>
  }

}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000090 	.word	0x20000090
 8002c48:	40012000 	.word	0x40012000
 8002c4c:	0f000001 	.word	0x0f000001

08002c50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <HAL_ADC_MspInit+0xdc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d157      	bne.n	8002d22 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_ADC_MspInit+0xe0>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	4a2d      	ldr	r2, [pc, #180]	; (8002d30 <HAL_ADC_MspInit+0xe0>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6453      	str	r3, [r2, #68]	; 0x44
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <HAL_ADC_MspInit+0xe0>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HAL_ADC_MspInit+0xe0>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <HAL_ADC_MspInit+0xe0>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <HAL_ADC_MspInit+0xe0>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = AudioIn_Pin;
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AudioIn_GPIO_Port, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	481d      	ldr	r0, [pc, #116]	; (8002d34 <HAL_ADC_MspInit+0xe4>)
 8002cbe:	f7ff f901 	bl	8001ec4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002cc4:	4a1d      	ldr	r2, [pc, #116]	; (8002d3c <HAL_ADC_MspInit+0xec>)
 8002cc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd4:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cda:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cea:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002cec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cf0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002cf2:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d00:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d06:	480c      	ldr	r0, [pc, #48]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002d08:	f7fe fd66 	bl	80017d8 <HAL_DMA_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002d12:	f000 ffc9 	bl	8003ca8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d1c:	4a06      	ldr	r2, [pc, #24]	; (8002d38 <HAL_ADC_MspInit+0xe8>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002d22:	bf00      	nop
 8002d24:	3728      	adds	r7, #40	; 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40012000 	.word	0x40012000
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	200000d8 	.word	0x200000d8
 8002d3c:	40026410 	.word	0x40026410

08002d40 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <MX_DMA_Init+0x4c>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <MX_DMA_Init+0x4c>)
 8002d50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <MX_DMA_Init+0x4c>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	2038      	movs	r0, #56	; 0x38
 8002d68:	f7fe fcff 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d6c:	2038      	movs	r0, #56	; 0x38
 8002d6e:	f7fe fd18 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	203c      	movs	r0, #60	; 0x3c
 8002d78:	f7fe fcf7 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002d7c:	203c      	movs	r0, #60	; 0x3c
 8002d7e:	f7fe fd10 	bl	80017a2 <HAL_NVIC_EnableIRQ>

}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800

08002d90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d96:	f107 0314 	add.w	r3, r7, #20
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
 8002da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a1e      	ldr	r2, [pc, #120]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002dcc:	f043 0320 	orr.w	r3, r3, #32
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <MX_GPIO_Init+0xb4>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2104      	movs	r1, #4
 8002e1a:	480b      	ldr	r0, [pc, #44]	; (8002e48 <MX_GPIO_Init+0xb8>)
 8002e1c:	f7ff f9fc 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002e20:	2304      	movs	r3, #4
 8002e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e24:	2301      	movs	r3, #1
 8002e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	4619      	mov	r1, r3
 8002e36:	4804      	ldr	r0, [pc, #16]	; (8002e48 <MX_GPIO_Init+0xb8>)
 8002e38:	f7ff f844 	bl	8001ec4 <HAL_GPIO_Init>

}
 8002e3c:	bf00      	nop
 8002e3e:	3728      	adds	r7, #40	; 0x28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020800 	.word	0x40020800

08002e4c <LCD_Init>:
uint16_t ILI9341_x;
uint16_t ILI9341_y;
LCD_Options_t ILI9341_Opts;
uint8_t ILI9341_INT_CalledFromPuts = 0;

void LCD_Init(void){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	//Data/Cmd pin WRX -> PD13
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e52:	2301      	movs	r3, #1
 8002e54:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	61bb      	str	r3, [r7, #24]
	
	__GPIOD_CLK_ENABLE();		//Init of clock
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	4bc5      	ldr	r3, [pc, #788]	; (8003178 <LCD_Init+0x32c>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4ac4      	ldr	r2, [pc, #784]	; (8003178 <LCD_Init+0x32c>)
 8002e68:	f043 0308 	orr.w	r3, r3, #8
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4bc2      	ldr	r3, [pc, #776]	; (8003178 <LCD_Init+0x32c>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
	
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e7e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e80:	f107 030c 	add.w	r3, r7, #12
 8002e84:	4619      	mov	r1, r3
 8002e86:	48bd      	ldr	r0, [pc, #756]	; (800317c <LCD_Init+0x330>)
 8002e88:	f7ff f81c 	bl	8001ec4 <HAL_GPIO_Init>
	
	//NSS/CS pin -> PC2
	__GPIOC_CLK_ENABLE();		//Init of clock
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	4bb9      	ldr	r3, [pc, #740]	; (8003178 <LCD_Init+0x32c>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	4ab8      	ldr	r2, [pc, #736]	; (8003178 <LCD_Init+0x32c>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9c:	4bb6      	ldr	r3, [pc, #728]	; (8003178 <LCD_Init+0x32c>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
	
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	48b3      	ldr	r0, [pc, #716]	; (8003180 <LCD_Init+0x334>)
 8002eb4:	f7ff f806 	bl	8001ec4 <HAL_GPIO_Init>

	//RST pin -> PD12
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec2:	f107 030c 	add.w	r3, r7, #12
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	48ac      	ldr	r0, [pc, #688]	; (800317c <LCD_Init+0x330>)
 8002eca:	f7fe fffb 	bl	8001ec4 <HAL_GPIO_Init>
	
	LCD_CS_SET;
 8002ece:	2201      	movs	r2, #1
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	48ab      	ldr	r0, [pc, #684]	; (8003180 <LCD_Init+0x334>)
 8002ed4:	f7ff f9a0 	bl	8002218 <HAL_GPIO_WritePin>
	
	LCD_SPI_Init();
 8002ed8:	f000 fc62 	bl	80037a0 <LCD_SPI_Init>
	
	LCD_RST_RESET;
 8002edc:	2200      	movs	r2, #0
 8002ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ee2:	48a6      	ldr	r0, [pc, #664]	; (800317c <LCD_Init+0x330>)
 8002ee4:	f7ff f998 	bl	8002218 <HAL_GPIO_WritePin>
	LCD_Delay(20000);
 8002ee8:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002eec:	f000 f996 	bl	800321c <LCD_Delay>
	LCD_RST_SET;
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ef6:	48a1      	ldr	r0, [pc, #644]	; (800317c <LCD_Init+0x330>)
 8002ef8:	f7ff f98e 	bl	8002218 <HAL_GPIO_WritePin>
	LCD_Delay(20000);
 8002efc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002f00:	f000 f98c 	bl	800321c <LCD_Delay>
	
	LCD_SendCmd(ILI9341_RESET);
 8002f04:	2001      	movs	r0, #1
 8002f06:	f000 f967 	bl	80031d8 <LCD_SendCmd>
	LCD_Delay(50000);
 8002f0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f0e:	f000 f985 	bl	800321c <LCD_Delay>
	
	LCD_SendCmd(ILI9341_POWERA);
 8002f12:	20cb      	movs	r0, #203	; 0xcb
 8002f14:	f000 f960 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x39);
 8002f18:	2039      	movs	r0, #57	; 0x39
 8002f1a:	f000 f93b 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x2C);
 8002f1e:	202c      	movs	r0, #44	; 0x2c
 8002f20:	f000 f938 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f000 f935 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x34);
 8002f2a:	2034      	movs	r0, #52	; 0x34
 8002f2c:	f000 f932 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x02);
 8002f30:	2002      	movs	r0, #2
 8002f32:	f000 f92f 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_POWERB);
 8002f36:	20cf      	movs	r0, #207	; 0xcf
 8002f38:	f000 f94e 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x00);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f000 f929 	bl	8003194 <LCD_SendData>
	LCD_SendData(0xC1);
 8002f42:	20c1      	movs	r0, #193	; 0xc1
 8002f44:	f000 f926 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x30);
 8002f48:	2030      	movs	r0, #48	; 0x30
 8002f4a:	f000 f923 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_DTCA);
 8002f4e:	20e8      	movs	r0, #232	; 0xe8
 8002f50:	f000 f942 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x85);
 8002f54:	2085      	movs	r0, #133	; 0x85
 8002f56:	f000 f91d 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x00);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f000 f91a 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x78);
 8002f60:	2078      	movs	r0, #120	; 0x78
 8002f62:	f000 f917 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_DTCB);
 8002f66:	20ea      	movs	r0, #234	; 0xea
 8002f68:	f000 f936 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x00);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f000 f911 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f000 f90e 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_POWER_SEQ);
 8002f78:	20ed      	movs	r0, #237	; 0xed
 8002f7a:	f000 f92d 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x64);
 8002f7e:	2064      	movs	r0, #100	; 0x64
 8002f80:	f000 f908 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x03);
 8002f84:	2003      	movs	r0, #3
 8002f86:	f000 f905 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x12);
 8002f8a:	2012      	movs	r0, #18
 8002f8c:	f000 f902 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x81);
 8002f90:	2081      	movs	r0, #129	; 0x81
 8002f92:	f000 f8ff 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_PRC);
 8002f96:	20f7      	movs	r0, #247	; 0xf7
 8002f98:	f000 f91e 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x20);
 8002f9c:	2020      	movs	r0, #32
 8002f9e:	f000 f8f9 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_POWER1);
 8002fa2:	20c0      	movs	r0, #192	; 0xc0
 8002fa4:	f000 f918 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x23);
 8002fa8:	2023      	movs	r0, #35	; 0x23
 8002faa:	f000 f8f3 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_POWER2);
 8002fae:	20c1      	movs	r0, #193	; 0xc1
 8002fb0:	f000 f912 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x10);
 8002fb4:	2010      	movs	r0, #16
 8002fb6:	f000 f8ed 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_VCOM1);
 8002fba:	20c5      	movs	r0, #197	; 0xc5
 8002fbc:	f000 f90c 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x3E);
 8002fc0:	203e      	movs	r0, #62	; 0x3e
 8002fc2:	f000 f8e7 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x28);
 8002fc6:	2028      	movs	r0, #40	; 0x28
 8002fc8:	f000 f8e4 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_VCOM2);
 8002fcc:	20c7      	movs	r0, #199	; 0xc7
 8002fce:	f000 f903 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x86);
 8002fd2:	2086      	movs	r0, #134	; 0x86
 8002fd4:	f000 f8de 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_MAC);
 8002fd8:	2036      	movs	r0, #54	; 0x36
 8002fda:	f000 f8fd 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x48);
 8002fde:	2048      	movs	r0, #72	; 0x48
 8002fe0:	f000 f8d8 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_PIXEL_FORMAT);
 8002fe4:	203a      	movs	r0, #58	; 0x3a
 8002fe6:	f000 f8f7 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x55);
 8002fea:	2055      	movs	r0, #85	; 0x55
 8002fec:	f000 f8d2 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_FRC);
 8002ff0:	20b1      	movs	r0, #177	; 0xb1
 8002ff2:	f000 f8f1 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x00);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f000 f8cc 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x18);
 8002ffc:	2018      	movs	r0, #24
 8002ffe:	f000 f8c9 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_DFC);
 8003002:	20b6      	movs	r0, #182	; 0xb6
 8003004:	f000 f8e8 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x08);
 8003008:	2008      	movs	r0, #8
 800300a:	f000 f8c3 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x82);
 800300e:	2082      	movs	r0, #130	; 0x82
 8003010:	f000 f8c0 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x27);
 8003014:	2027      	movs	r0, #39	; 0x27
 8003016:	f000 f8bd 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_3GAMMA_EN);
 800301a:	20f2      	movs	r0, #242	; 0xf2
 800301c:	f000 f8dc 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x00);
 8003020:	2000      	movs	r0, #0
 8003022:	f000 f8b7 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_COLUMN_ADDR);
 8003026:	202a      	movs	r0, #42	; 0x2a
 8003028:	f000 f8d6 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x00);
 800302c:	2000      	movs	r0, #0
 800302e:	f000 f8b1 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x00);
 8003032:	2000      	movs	r0, #0
 8003034:	f000 f8ae 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f000 f8ab 	bl	8003194 <LCD_SendData>
	LCD_SendData(0xEF);
 800303e:	20ef      	movs	r0, #239	; 0xef
 8003040:	f000 f8a8 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_PAGE_ADDR);
 8003044:	202b      	movs	r0, #43	; 0x2b
 8003046:	f000 f8c7 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x00);
 800304a:	2000      	movs	r0, #0
 800304c:	f000 f8a2 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x00);
 8003050:	2000      	movs	r0, #0
 8003052:	f000 f89f 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x01);
 8003056:	2001      	movs	r0, #1
 8003058:	f000 f89c 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x3F);
 800305c:	203f      	movs	r0, #63	; 0x3f
 800305e:	f000 f899 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_GAMMA);
 8003062:	2026      	movs	r0, #38	; 0x26
 8003064:	f000 f8b8 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x01);
 8003068:	2001      	movs	r0, #1
 800306a:	f000 f893 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_PGAMMA);
 800306e:	20e0      	movs	r0, #224	; 0xe0
 8003070:	f000 f8b2 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x0F);
 8003074:	200f      	movs	r0, #15
 8003076:	f000 f88d 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x31);
 800307a:	2031      	movs	r0, #49	; 0x31
 800307c:	f000 f88a 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x2B);
 8003080:	202b      	movs	r0, #43	; 0x2b
 8003082:	f000 f887 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x0C);
 8003086:	200c      	movs	r0, #12
 8003088:	f000 f884 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x0E);
 800308c:	200e      	movs	r0, #14
 800308e:	f000 f881 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x08);
 8003092:	2008      	movs	r0, #8
 8003094:	f000 f87e 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x4E);
 8003098:	204e      	movs	r0, #78	; 0x4e
 800309a:	f000 f87b 	bl	8003194 <LCD_SendData>
	LCD_SendData(0xF1);
 800309e:	20f1      	movs	r0, #241	; 0xf1
 80030a0:	f000 f878 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x37);
 80030a4:	2037      	movs	r0, #55	; 0x37
 80030a6:	f000 f875 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x07);
 80030aa:	2007      	movs	r0, #7
 80030ac:	f000 f872 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x10);
 80030b0:	2010      	movs	r0, #16
 80030b2:	f000 f86f 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x03);
 80030b6:	2003      	movs	r0, #3
 80030b8:	f000 f86c 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x0E);
 80030bc:	200e      	movs	r0, #14
 80030be:	f000 f869 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x09);
 80030c2:	2009      	movs	r0, #9
 80030c4:	f000 f866 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x00);
 80030c8:	2000      	movs	r0, #0
 80030ca:	f000 f863 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_NGAMMA);
 80030ce:	20e1      	movs	r0, #225	; 0xe1
 80030d0:	f000 f882 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(0x00);
 80030d4:	2000      	movs	r0, #0
 80030d6:	f000 f85d 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x0E);
 80030da:	200e      	movs	r0, #14
 80030dc:	f000 f85a 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x14);
 80030e0:	2014      	movs	r0, #20
 80030e2:	f000 f857 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x03);
 80030e6:	2003      	movs	r0, #3
 80030e8:	f000 f854 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x11);
 80030ec:	2011      	movs	r0, #17
 80030ee:	f000 f851 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x07);
 80030f2:	2007      	movs	r0, #7
 80030f4:	f000 f84e 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x31);
 80030f8:	2031      	movs	r0, #49	; 0x31
 80030fa:	f000 f84b 	bl	8003194 <LCD_SendData>
	LCD_SendData(0xC1);
 80030fe:	20c1      	movs	r0, #193	; 0xc1
 8003100:	f000 f848 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x48);
 8003104:	2048      	movs	r0, #72	; 0x48
 8003106:	f000 f845 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x08);
 800310a:	2008      	movs	r0, #8
 800310c:	f000 f842 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x0F);
 8003110:	200f      	movs	r0, #15
 8003112:	f000 f83f 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x0C);
 8003116:	200c      	movs	r0, #12
 8003118:	f000 f83c 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x31);
 800311c:	2031      	movs	r0, #49	; 0x31
 800311e:	f000 f839 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x36);
 8003122:	2036      	movs	r0, #54	; 0x36
 8003124:	f000 f836 	bl	8003194 <LCD_SendData>
	LCD_SendData(0x0F);
 8003128:	200f      	movs	r0, #15
 800312a:	f000 f833 	bl	8003194 <LCD_SendData>
	LCD_SendCmd(ILI9341_SLEEP_OUT);
 800312e:	2011      	movs	r0, #17
 8003130:	f000 f852 	bl	80031d8 <LCD_SendCmd>

	LCD_Delay(1000000);
 8003134:	4813      	ldr	r0, [pc, #76]	; (8003184 <LCD_Init+0x338>)
 8003136:	f000 f871 	bl	800321c <LCD_Delay>

	LCD_SendCmd(ILI9341_DISPLAY_ON);
 800313a:	2029      	movs	r0, #41	; 0x29
 800313c:	f000 f84c 	bl	80031d8 <LCD_SendCmd>
	LCD_SendCmd(ILI9341_GRAM);
 8003140:	202c      	movs	r0, #44	; 0x2c
 8003142:	f000 f849 	bl	80031d8 <LCD_SendCmd>
	
	ILI9341_x = ILI9341_y = 0;
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <LCD_Init+0x33c>)
 8003148:	2200      	movs	r2, #0
 800314a:	801a      	strh	r2, [r3, #0]
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <LCD_Init+0x33c>)
 800314e:	881a      	ldrh	r2, [r3, #0]
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <LCD_Init+0x340>)
 8003152:	801a      	strh	r2, [r3, #0]
	
	ILI9341_Opts.width = ILI9341_WIDTH;
 8003154:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <LCD_Init+0x344>)
 8003156:	22f0      	movs	r2, #240	; 0xf0
 8003158:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <LCD_Init+0x344>)
 800315c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003160:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = LCD_Portrait;
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <LCD_Init+0x344>)
 8003164:	2201      	movs	r2, #1
 8003166:	711a      	strb	r2, [r3, #4]
	
	LCD_Fill(ILI9341_COLOR_WHITE);
 8003168:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800316c:	f000 f8b0 	bl	80032d0 <LCD_Fill>
}
 8003170:	bf00      	nop
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40023800 	.word	0x40023800
 800317c:	40020c00 	.word	0x40020c00
 8003180:	40020800 	.word	0x40020800
 8003184:	000f4240 	.word	0x000f4240
 8003188:	20000142 	.word	0x20000142
 800318c:	20000138 	.word	0x20000138
 8003190:	2000013c 	.word	0x2000013c

08003194 <LCD_SendData>:

void LCD_SendData(uint8_t data){
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
	LCD_WRX_SET;
 800319e:	2201      	movs	r2, #1
 80031a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031a4:	480a      	ldr	r0, [pc, #40]	; (80031d0 <LCD_SendData+0x3c>)
 80031a6:	f7ff f837 	bl	8002218 <HAL_GPIO_WritePin>
	LCD_CS_RESET;
 80031aa:	2200      	movs	r2, #0
 80031ac:	2104      	movs	r1, #4
 80031ae:	4809      	ldr	r0, [pc, #36]	; (80031d4 <LCD_SendData+0x40>)
 80031b0:	f7ff f832 	bl	8002218 <HAL_GPIO_WritePin>
	LCD_SPI_Send(data);
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fb56 	bl	8003868 <LCD_SPI_Send>
	LCD_CS_SET;
 80031bc:	2201      	movs	r2, #1
 80031be:	2104      	movs	r1, #4
 80031c0:	4804      	ldr	r0, [pc, #16]	; (80031d4 <LCD_SendData+0x40>)
 80031c2:	f7ff f829 	bl	8002218 <HAL_GPIO_WritePin>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40020c00 	.word	0x40020c00
 80031d4:	40020800 	.word	0x40020800

080031d8 <LCD_SendCmd>:

void LCD_SendCmd(uint8_t data){
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
	LCD_WRX_RESET;
 80031e2:	2200      	movs	r2, #0
 80031e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031e8:	480a      	ldr	r0, [pc, #40]	; (8003214 <LCD_SendCmd+0x3c>)
 80031ea:	f7ff f815 	bl	8002218 <HAL_GPIO_WritePin>
	LCD_CS_RESET;
 80031ee:	2200      	movs	r2, #0
 80031f0:	2104      	movs	r1, #4
 80031f2:	4809      	ldr	r0, [pc, #36]	; (8003218 <LCD_SendCmd+0x40>)
 80031f4:	f7ff f810 	bl	8002218 <HAL_GPIO_WritePin>
	LCD_SPI_Send(data);
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fb34 	bl	8003868 <LCD_SPI_Send>
	LCD_CS_SET;
 8003200:	2201      	movs	r2, #1
 8003202:	2104      	movs	r1, #4
 8003204:	4804      	ldr	r0, [pc, #16]	; (8003218 <LCD_SendCmd+0x40>)
 8003206:	f7ff f807 	bl	8002218 <HAL_GPIO_WritePin>
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40020c00 	.word	0x40020c00
 8003218:	40020800 	.word	0x40020800

0800321c <LCD_Delay>:

void LCD_Delay(volatile uint32_t delay){
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--);
 8003224:	e002      	b.n	800322c <LCD_Delay+0x10>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3b01      	subs	r3, #1
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f9      	bne.n	8003226 <LCD_Delay+0xa>
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 800323e:	b590      	push	{r4, r7, lr}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	4604      	mov	r4, r0
 8003246:	4608      	mov	r0, r1
 8003248:	4611      	mov	r1, r2
 800324a:	461a      	mov	r2, r3
 800324c:	4623      	mov	r3, r4
 800324e:	80fb      	strh	r3, [r7, #6]
 8003250:	4603      	mov	r3, r0
 8003252:	80bb      	strh	r3, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
 8003258:	4613      	mov	r3, r2
 800325a:	803b      	strh	r3, [r7, #0]
	LCD_SendCmd(ILI9341_COLUMN_ADDR);
 800325c:	202a      	movs	r0, #42	; 0x2a
 800325e:	f7ff ffbb 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(x1 >> 8);
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	b29b      	uxth	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff92 	bl	8003194 <LCD_SendData>
	LCD_SendData(x1 & 0xFF);
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff8d 	bl	8003194 <LCD_SendData>
	LCD_SendData(x2 >> 8);
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	b29b      	uxth	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff86 	bl	8003194 <LCD_SendData>
	LCD_SendData(x2 & 0xFF);
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff81 	bl	8003194 <LCD_SendData>

	LCD_SendCmd(ILI9341_PAGE_ADDR);
 8003292:	202b      	movs	r0, #43	; 0x2b
 8003294:	f7ff ffa0 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(y1 >> 8);
 8003298:	88bb      	ldrh	r3, [r7, #4]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	b29b      	uxth	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff77 	bl	8003194 <LCD_SendData>
	LCD_SendData(y1 & 0xFF);
 80032a6:	88bb      	ldrh	r3, [r7, #4]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff72 	bl	8003194 <LCD_SendData>
	LCD_SendData(y2 >> 8);
 80032b0:	883b      	ldrh	r3, [r7, #0]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff6b 	bl	8003194 <LCD_SendData>
	LCD_SendData(y2 & 0xFF);
 80032be:	883b      	ldrh	r3, [r7, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff66 	bl	8003194 <LCD_SendData>
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd90      	pop	{r4, r7, pc}

080032d0 <LCD_Fill>:

void LCD_Fill(uint16_t color) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	80fb      	strh	r3, [r7, #6]
	unsigned int n, i, j;
	i = color >> 8;
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	b29b      	uxth	r3, r3
 80032e0:	613b      	str	r3, [r7, #16]
	j = color & 0xFF;
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	60fb      	str	r3, [r7, #12]
	LCD_SetCursorPosition(0, 0, ILI9341_Opts.width - 1, ILI9341_Opts.height - 1);
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <LCD_Fill+0x88>)
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <LCD_Fill+0x88>)
 80032f2:	885b      	ldrh	r3, [r3, #2]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2100      	movs	r1, #0
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7ff ff9f 	bl	800323e <LCD_SetCursorPosition>

	LCD_SendCmd(ILI9341_GRAM);
 8003300:	202c      	movs	r0, #44	; 0x2c
 8003302:	f7ff ff69 	bl	80031d8 <LCD_SendCmd>

	LCD_CS_RESET;
 8003306:	2200      	movs	r2, #0
 8003308:	2104      	movs	r1, #4
 800330a:	4814      	ldr	r0, [pc, #80]	; (800335c <LCD_Fill+0x8c>)
 800330c:	f7fe ff84 	bl	8002218 <HAL_GPIO_WritePin>
	LCD_WRX_SET;
 8003310:	2201      	movs	r2, #1
 8003312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003316:	4812      	ldr	r0, [pc, #72]	; (8003360 <LCD_Fill+0x90>)
 8003318:	f7fe ff7e 	bl	8002218 <HAL_GPIO_WritePin>
	
	for (n = 0; n < ILI9341_PIXEL; n++) {
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	e00c      	b.n	800333c <LCD_Fill+0x6c>
		LCD_SPI_Send(i);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fa9e 	bl	8003868 <LCD_SPI_Send>
		LCD_SPI_Send(j);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fa99 	bl	8003868 <LCD_SPI_Send>
	for (n = 0; n < ILI9341_PIXEL; n++) {
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3301      	adds	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8003342:	d3ee      	bcc.n	8003322 <LCD_Fill+0x52>
	}
	
	LCD_CS_SET;
 8003344:	2201      	movs	r2, #1
 8003346:	2104      	movs	r1, #4
 8003348:	4804      	ldr	r0, [pc, #16]	; (800335c <LCD_Fill+0x8c>)
 800334a:	f7fe ff65 	bl	8002218 <HAL_GPIO_WritePin>
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	2000013c 	.word	0x2000013c
 800335c:	40020800 	.word	0x40020800
 8003360:	40020c00 	.word	0x40020c00

08003364 <LCD_Rotate>:
	}
	
	LCD_CS_SET;
}

void LCD_Rotate(LCD_Orientation_t orientation) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
	LCD_SendCmd(ILI9341_MAC);
 800336e:	2036      	movs	r0, #54	; 0x36
 8003370:	f7ff ff32 	bl	80031d8 <LCD_SendCmd>
	if (orientation == LCD_Orientation_Portrait_1) {
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <LCD_Rotate+0x1e>
		LCD_SendData(0x58);
 800337a:	2058      	movs	r0, #88	; 0x58
 800337c:	f7ff ff0a 	bl	8003194 <LCD_SendData>
 8003380:	e013      	b.n	80033aa <LCD_Rotate+0x46>
	} else if (orientation == LCD_Orientation_Portrait_2) {
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d103      	bne.n	8003390 <LCD_Rotate+0x2c>
		LCD_SendData(0x88);
 8003388:	2088      	movs	r0, #136	; 0x88
 800338a:	f7ff ff03 	bl	8003194 <LCD_SendData>
 800338e:	e00c      	b.n	80033aa <LCD_Rotate+0x46>
	} else if (orientation == LCD_Orientation_Landscape_1) {
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d103      	bne.n	800339e <LCD_Rotate+0x3a>
		LCD_SendData(0x28);
 8003396:	2028      	movs	r0, #40	; 0x28
 8003398:	f7ff fefc 	bl	8003194 <LCD_SendData>
 800339c:	e005      	b.n	80033aa <LCD_Rotate+0x46>
	} else if (orientation == LCD_Orientation_Landscape_2) {
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d102      	bne.n	80033aa <LCD_Rotate+0x46>
		LCD_SendData(0xE8);
 80033a4:	20e8      	movs	r0, #232	; 0xe8
 80033a6:	f7ff fef5 	bl	8003194 <LCD_SendData>
	}
	
	if (orientation == LCD_Orientation_Portrait_1 || orientation == LCD_Orientation_Portrait_2) {
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <LCD_Rotate+0x52>
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d10a      	bne.n	80033cc <LCD_Rotate+0x68>
		ILI9341_Opts.width = ILI9341_WIDTH;
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <LCD_Rotate+0x84>)
 80033b8:	22f0      	movs	r2, #240	; 0xf0
 80033ba:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_HEIGHT;
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <LCD_Rotate+0x84>)
 80033be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80033c2:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = LCD_Portrait;
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <LCD_Rotate+0x84>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	711a      	strb	r2, [r3, #4]
 80033ca:	e009      	b.n	80033e0 <LCD_Rotate+0x7c>
	} else {
		ILI9341_Opts.width = ILI9341_HEIGHT;
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <LCD_Rotate+0x84>)
 80033ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80033d2:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_WIDTH;
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <LCD_Rotate+0x84>)
 80033d6:	22f0      	movs	r2, #240	; 0xf0
 80033d8:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = LCD_Landscape;
 80033da:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <LCD_Rotate+0x84>)
 80033dc:	2200      	movs	r2, #0
 80033de:	711a      	strb	r2, [r3, #4]
	}
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	2000013c 	.word	0x2000013c

080033ec <LCD_DrawPixel>:

void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	80fb      	strh	r3, [r7, #6]
 80033f6:	460b      	mov	r3, r1
 80033f8:	80bb      	strh	r3, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	807b      	strh	r3, [r7, #2]
	LCD_SetCursorPosition(x, y, x, y);
 80033fe:	88bb      	ldrh	r3, [r7, #4]
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	88b9      	ldrh	r1, [r7, #4]
 8003404:	88f8      	ldrh	r0, [r7, #6]
 8003406:	f7ff ff1a 	bl	800323e <LCD_SetCursorPosition>

	LCD_SendCmd(ILI9341_GRAM);
 800340a:	202c      	movs	r0, #44	; 0x2c
 800340c:	f7ff fee4 	bl	80031d8 <LCD_SendCmd>
	LCD_SendData(color >> 8);
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	b29b      	uxth	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff febb 	bl	8003194 <LCD_SendData>
	LCD_SendData(color & 0xFF);
 800341e:	887b      	ldrh	r3, [r7, #2]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff feb6 	bl	8003194 <LCD_SendData>
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <LCD_Puts>:

void LCD_Puts(uint16_t x, uint16_t y, char *str, LCD_FontDef_t *font, uint16_t foreground) {
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af02      	add	r7, sp, #8
 8003436:	60ba      	str	r2, [r7, #8]
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	4603      	mov	r3, r0
 800343c:	81fb      	strh	r3, [r7, #14]
 800343e:	460b      	mov	r3, r1
 8003440:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 8003442:	89fb      	ldrh	r3, [r7, #14]
 8003444:	82fb      	strh	r3, [r7, #22]
	
	/* Set X and Y coordinates */
	ILI9341_x = x;
 8003446:	4a23      	ldr	r2, [pc, #140]	; (80034d4 <LCD_Puts+0xa4>)
 8003448:	89fb      	ldrh	r3, [r7, #14]
 800344a:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 800344c:	4a22      	ldr	r2, [pc, #136]	; (80034d8 <LCD_Puts+0xa8>)
 800344e:	89bb      	ldrh	r3, [r7, #12]
 8003450:	8013      	strh	r3, [r2, #0]
	
	while (*str) {
 8003452:	e036      	b.n	80034c2 <LCD_Puts+0x92>
		//New line
		if (*str == '\n') {
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b0a      	cmp	r3, #10
 800345a:	d11d      	bne.n	8003498 <LCD_Puts+0x68>
			ILI9341_y += font->FontHeight + 1;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	785b      	ldrb	r3, [r3, #1]
 8003460:	b29a      	uxth	r2, r3
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <LCD_Puts+0xa8>)
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	4413      	add	r3, r2
 8003468:	b29b      	uxth	r3, r3
 800346a:	3301      	adds	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <LCD_Puts+0xa8>)
 8003470:	801a      	strh	r2, [r3, #0]
			//if after \n is also \r, than go to the left of the screen
			if (*(str + 1) == '\r') {
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	3301      	adds	r3, #1
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b0d      	cmp	r3, #13
 800347a:	d106      	bne.n	800348a <LCD_Puts+0x5a>
				ILI9341_x = 0;
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <LCD_Puts+0xa4>)
 800347e:	2200      	movs	r2, #0
 8003480:	801a      	strh	r2, [r3, #0]
				str++;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3301      	adds	r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	e002      	b.n	8003490 <LCD_Puts+0x60>
			} else {
				ILI9341_x = startX;
 800348a:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <LCD_Puts+0xa4>)
 800348c:	8afb      	ldrh	r3, [r7, #22]
 800348e:	8013      	strh	r3, [r2, #0]
			}
			str++;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	3301      	adds	r3, #1
 8003494:	60bb      	str	r3, [r7, #8]
			continue;
 8003496:	e014      	b.n	80034c2 <LCD_Puts+0x92>
		} else if (*str == '\r') {
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b0d      	cmp	r3, #13
 800349e:	d103      	bne.n	80034a8 <LCD_Puts+0x78>
			str++;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3301      	adds	r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
			continue;
 80034a6:	e00c      	b.n	80034c2 <LCD_Puts+0x92>
		}
		
		LCD_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground);
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <LCD_Puts+0xa4>)
 80034aa:	8818      	ldrh	r0, [r3, #0]
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <LCD_Puts+0xa8>)
 80034ae:	8819      	ldrh	r1, [r3, #0]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	60ba      	str	r2, [r7, #8]
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	8c3b      	ldrh	r3, [r7, #32]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f000 f80d 	bl	80034dc <LCD_Putc>
	while (*str) {
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1c4      	bne.n	8003454 <LCD_Puts+0x24>
	}
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000138 	.word	0x20000138
 80034d8:	20000142 	.word	0x20000142

080034dc <LCD_Putc>:
		w += font->FontWidth;
	}
	*width = w;
}

void LCD_Putc(uint16_t x, uint16_t y, char c, LCD_FontDef_t *font, uint16_t foreground) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	4603      	mov	r3, r0
 80034e6:	81fb      	strh	r3, [r7, #14]
 80034e8:	460b      	mov	r3, r1
 80034ea:	81bb      	strh	r3, [r7, #12]
 80034ec:	4613      	mov	r3, r2
 80034ee:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 80034f0:	4a33      	ldr	r2, [pc, #204]	; (80035c0 <LCD_Putc+0xe4>)
 80034f2:	89fb      	ldrh	r3, [r7, #14]
 80034f4:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 80034f6:	4a33      	ldr	r2, [pc, #204]	; (80035c4 <LCD_Putc+0xe8>)
 80034f8:	89bb      	ldrh	r3, [r7, #12]
 80034fa:	8013      	strh	r3, [r2, #0]
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <LCD_Putc+0xe4>)
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	4413      	add	r3, r2
 8003508:	4a2f      	ldr	r2, [pc, #188]	; (80035c8 <LCD_Putc+0xec>)
 800350a:	8812      	ldrh	r2, [r2, #0]
 800350c:	4293      	cmp	r3, r2
 800350e:	dd0b      	ble.n	8003528 <LCD_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		ILI9341_y += font->FontHeight;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	785b      	ldrb	r3, [r3, #1]
 8003514:	b29a      	uxth	r2, r3
 8003516:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <LCD_Putc+0xe8>)
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	4413      	add	r3, r2
 800351c:	b29a      	uxth	r2, r3
 800351e:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <LCD_Putc+0xe8>)
 8003520:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 8003522:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <LCD_Putc+0xe4>)
 8003524:	2200      	movs	r2, #0
 8003526:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw font data */
	for (i = 0; i < font->FontHeight; i++) {
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	e035      	b.n	800359a <LCD_Putc+0xbe>
		b = font->data[(c - 32) * font->FontHeight + i];
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	3b20      	subs	r3, #32
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	7849      	ldrb	r1, [r1, #1]
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4619      	mov	r1, r3
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	440b      	add	r3, r1
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->FontWidth; j++) {
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	e01a      	b.n	8003588 <LCD_Putc+0xac>
			if ((b << j) & 0x8000) {
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00f      	beq.n	8003582 <LCD_Putc+0xa6>
				LCD_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	b29a      	uxth	r2, r3
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <LCD_Putc+0xe4>)
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	4413      	add	r3, r2
 800356c:	b298      	uxth	r0, r3
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	b29a      	uxth	r2, r3
 8003572:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <LCD_Putc+0xe8>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	4413      	add	r3, r2
 8003578:	b29b      	uxth	r3, r3
 800357a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800357c:	4619      	mov	r1, r3
 800357e:	f7ff ff35 	bl	80033ec <LCD_DrawPixel>
		for (j = 0; j < font->FontWidth; j++) {
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	3301      	adds	r3, #1
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4293      	cmp	r3, r2
 8003592:	d3de      	bcc.n	8003552 <LCD_Putc+0x76>
	for (i = 0; i < font->FontHeight; i++) {
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	3301      	adds	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	785b      	ldrb	r3, [r3, #1]
 800359e:	461a      	mov	r2, r3
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d3c3      	bcc.n	800352e <LCD_Putc+0x52>
			}
		}
	}
	ILI9341_x += font->FontWidth;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <LCD_Putc+0xe4>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	4413      	add	r3, r2
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <LCD_Putc+0xe4>)
 80035b6:	801a      	strh	r2, [r3, #0]
}
 80035b8:	bf00      	nop
 80035ba:	3720      	adds	r7, #32
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000138 	.word	0x20000138
 80035c4:	20000142 	.word	0x20000142
 80035c8:	2000013c 	.word	0x2000013c

080035cc <LCD_DrawLine>:


void LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4604      	mov	r4, r0
 80035d4:	4608      	mov	r0, r1
 80035d6:	4611      	mov	r1, r2
 80035d8:	461a      	mov	r2, r3
 80035da:	4623      	mov	r3, r4
 80035dc:	80fb      	strh	r3, [r7, #6]
 80035de:	4603      	mov	r3, r0
 80035e0:	80bb      	strh	r3, [r7, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	807b      	strh	r3, [r7, #2]
 80035e6:	4613      	mov	r3, r2
 80035e8:	803b      	strh	r3, [r7, #0]
	/* Code by dewoller: https://github.com/dewoller */
	
	int16_t dx, dy, sx, sy, err, e2; 
	
	/* Check for overflow */
	if (x0 >= ILI9341_Opts.width) {
 80035ea:	4b50      	ldr	r3, [pc, #320]	; (800372c <LCD_DrawLine+0x160>)
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d303      	bcc.n	80035fc <LCD_DrawLine+0x30>
		x0 = ILI9341_Opts.width - 1;
 80035f4:	4b4d      	ldr	r3, [pc, #308]	; (800372c <LCD_DrawLine+0x160>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= ILI9341_Opts.width) {
 80035fc:	4b4b      	ldr	r3, [pc, #300]	; (800372c <LCD_DrawLine+0x160>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	887a      	ldrh	r2, [r7, #2]
 8003602:	429a      	cmp	r2, r3
 8003604:	d303      	bcc.n	800360e <LCD_DrawLine+0x42>
		x1 = ILI9341_Opts.width - 1;
 8003606:	4b49      	ldr	r3, [pc, #292]	; (800372c <LCD_DrawLine+0x160>)
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	3b01      	subs	r3, #1
 800360c:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= ILI9341_Opts.height) {
 800360e:	4b47      	ldr	r3, [pc, #284]	; (800372c <LCD_DrawLine+0x160>)
 8003610:	885b      	ldrh	r3, [r3, #2]
 8003612:	88ba      	ldrh	r2, [r7, #4]
 8003614:	429a      	cmp	r2, r3
 8003616:	d303      	bcc.n	8003620 <LCD_DrawLine+0x54>
		y0 = ILI9341_Opts.height - 1;
 8003618:	4b44      	ldr	r3, [pc, #272]	; (800372c <LCD_DrawLine+0x160>)
 800361a:	885b      	ldrh	r3, [r3, #2]
 800361c:	3b01      	subs	r3, #1
 800361e:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= ILI9341_Opts.height) {
 8003620:	4b42      	ldr	r3, [pc, #264]	; (800372c <LCD_DrawLine+0x160>)
 8003622:	885b      	ldrh	r3, [r3, #2]
 8003624:	883a      	ldrh	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d303      	bcc.n	8003632 <LCD_DrawLine+0x66>
		y1 = ILI9341_Opts.height - 1;
 800362a:	4b40      	ldr	r3, [pc, #256]	; (800372c <LCD_DrawLine+0x160>)
 800362c:	885b      	ldrh	r3, [r3, #2]
 800362e:	3b01      	subs	r3, #1
 8003630:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003632:	88fa      	ldrh	r2, [r7, #6]
 8003634:	887b      	ldrh	r3, [r7, #2]
 8003636:	429a      	cmp	r2, r3
 8003638:	d205      	bcs.n	8003646 <LCD_DrawLine+0x7a>
 800363a:	887a      	ldrh	r2, [r7, #2]
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	b29b      	uxth	r3, r3
 8003642:	b21b      	sxth	r3, r3
 8003644:	e004      	b.n	8003650 <LCD_DrawLine+0x84>
 8003646:	88fa      	ldrh	r2, [r7, #6]
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	b29b      	uxth	r3, r3
 800364e:	b21b      	sxth	r3, r3
 8003650:	82bb      	strh	r3, [r7, #20]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003652:	88ba      	ldrh	r2, [r7, #4]
 8003654:	883b      	ldrh	r3, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d205      	bcs.n	8003666 <LCD_DrawLine+0x9a>
 800365a:	883a      	ldrh	r2, [r7, #0]
 800365c:	88bb      	ldrh	r3, [r7, #4]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	b29b      	uxth	r3, r3
 8003662:	b21b      	sxth	r3, r3
 8003664:	e004      	b.n	8003670 <LCD_DrawLine+0xa4>
 8003666:	88ba      	ldrh	r2, [r7, #4]
 8003668:	883b      	ldrh	r3, [r7, #0]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	b29b      	uxth	r3, r3
 800366e:	b21b      	sxth	r3, r3
 8003670:	827b      	strh	r3, [r7, #18]
	sx = (x0 < x1) ? 1 : -1; 
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	429a      	cmp	r2, r3
 8003678:	d201      	bcs.n	800367e <LCD_DrawLine+0xb2>
 800367a:	2301      	movs	r3, #1
 800367c:	e001      	b.n	8003682 <LCD_DrawLine+0xb6>
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	823b      	strh	r3, [r7, #16]
	sy = (y0 < y1) ? 1 : -1; 
 8003684:	88ba      	ldrh	r2, [r7, #4]
 8003686:	883b      	ldrh	r3, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d201      	bcs.n	8003690 <LCD_DrawLine+0xc4>
 800368c:	2301      	movs	r3, #1
 800368e:	e001      	b.n	8003694 <LCD_DrawLine+0xc8>
 8003690:	f04f 33ff 	mov.w	r3, #4294967295
 8003694:	81fb      	strh	r3, [r7, #14]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8003696:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800369a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800369e:	429a      	cmp	r2, r3
 80036a0:	dd06      	ble.n	80036b0 <LCD_DrawLine+0xe4>
 80036a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036a6:	0fda      	lsrs	r2, r3, #31
 80036a8:	4413      	add	r3, r2
 80036aa:	105b      	asrs	r3, r3, #1
 80036ac:	b21b      	sxth	r3, r3
 80036ae:	e006      	b.n	80036be <LCD_DrawLine+0xf2>
 80036b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036b4:	425b      	negs	r3, r3
 80036b6:	0fda      	lsrs	r2, r3, #31
 80036b8:	4413      	add	r3, r2
 80036ba:	105b      	asrs	r3, r3, #1
 80036bc:	b21b      	sxth	r3, r3
 80036be:	82fb      	strh	r3, [r7, #22]

	while (1) {
		LCD_DrawPixel(x0, y0, color); 
 80036c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036c2:	88b9      	ldrh	r1, [r7, #4]
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fe90 	bl	80033ec <LCD_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80036cc:	88fa      	ldrh	r2, [r7, #6]
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d103      	bne.n	80036dc <LCD_DrawLine+0x110>
 80036d4:	88ba      	ldrh	r2, [r7, #4]
 80036d6:	883b      	ldrh	r3, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d021      	beq.n	8003720 <LCD_DrawLine+0x154>
			break;
		}
		e2 = err; 
 80036dc:	8afb      	ldrh	r3, [r7, #22]
 80036de:	81bb      	strh	r3, [r7, #12]
		if (e2 > -dx) {
 80036e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80036e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036e8:	425b      	negs	r3, r3
 80036ea:	429a      	cmp	r2, r3
 80036ec:	dd08      	ble.n	8003700 <LCD_DrawLine+0x134>
			err -= dy;
 80036ee:	8afa      	ldrh	r2, [r7, #22]
 80036f0:	8a7b      	ldrh	r3, [r7, #18]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80036f8:	8a3a      	ldrh	r2, [r7, #16]
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	4413      	add	r3, r2
 80036fe:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8003700:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003704:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003708:	429a      	cmp	r2, r3
 800370a:	dad9      	bge.n	80036c0 <LCD_DrawLine+0xf4>
			err += dx;
 800370c:	8afa      	ldrh	r2, [r7, #22]
 800370e:	8abb      	ldrh	r3, [r7, #20]
 8003710:	4413      	add	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8003716:	89fa      	ldrh	r2, [r7, #14]
 8003718:	88bb      	ldrh	r3, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	80bb      	strh	r3, [r7, #4]
		LCD_DrawPixel(x0, y0, color); 
 800371e:	e7cf      	b.n	80036c0 <LCD_DrawLine+0xf4>
			break;
 8003720:	bf00      	nop
		} 
	}
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	bf00      	nop
 800372c:	2000013c 	.word	0x2000013c

08003730 <LCD_DrawRectangle>:

void LCD_DrawRectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b085      	sub	sp, #20
 8003734:	af02      	add	r7, sp, #8
 8003736:	4604      	mov	r4, r0
 8003738:	4608      	mov	r0, r1
 800373a:	4611      	mov	r1, r2
 800373c:	461a      	mov	r2, r3
 800373e:	4623      	mov	r3, r4
 8003740:	80fb      	strh	r3, [r7, #6]
 8003742:	4603      	mov	r3, r0
 8003744:	80bb      	strh	r3, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	807b      	strh	r3, [r7, #2]
 800374a:	4613      	mov	r3, r2
 800374c:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x0, y0, x1, y0, color); //Top
 800374e:	88bc      	ldrh	r4, [r7, #4]
 8003750:	887a      	ldrh	r2, [r7, #2]
 8003752:	88b9      	ldrh	r1, [r7, #4]
 8003754:	88f8      	ldrh	r0, [r7, #6]
 8003756:	8b3b      	ldrh	r3, [r7, #24]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	4623      	mov	r3, r4
 800375c:	f7ff ff36 	bl	80035cc <LCD_DrawLine>
	LCD_DrawLine(x0, y0, x0, y1, color);	//Left
 8003760:	883c      	ldrh	r4, [r7, #0]
 8003762:	88fa      	ldrh	r2, [r7, #6]
 8003764:	88b9      	ldrh	r1, [r7, #4]
 8003766:	88f8      	ldrh	r0, [r7, #6]
 8003768:	8b3b      	ldrh	r3, [r7, #24]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	4623      	mov	r3, r4
 800376e:	f7ff ff2d 	bl	80035cc <LCD_DrawLine>
	LCD_DrawLine(x1, y0, x1, y1, color);	//Right
 8003772:	883c      	ldrh	r4, [r7, #0]
 8003774:	887a      	ldrh	r2, [r7, #2]
 8003776:	88b9      	ldrh	r1, [r7, #4]
 8003778:	8878      	ldrh	r0, [r7, #2]
 800377a:	8b3b      	ldrh	r3, [r7, #24]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	4623      	mov	r3, r4
 8003780:	f7ff ff24 	bl	80035cc <LCD_DrawLine>
	LCD_DrawLine(x0, y1, x1, y1, color);	//Bottom
 8003784:	883c      	ldrh	r4, [r7, #0]
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	8839      	ldrh	r1, [r7, #0]
 800378a:	88f8      	ldrh	r0, [r7, #6]
 800378c:	8b3b      	ldrh	r3, [r7, #24]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	4623      	mov	r3, r4
 8003792:	f7ff ff1b 	bl	80035cc <LCD_DrawLine>
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}
	...

080037a0 <LCD_SPI_Init>:
*/
#include "lcd_spi.h"

static 	SPI_HandleTypeDef SPIhandle;

void LCD_SPI_Init(void){
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	//Init SPI pins
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a6:	2302      	movs	r3, #2
 80037a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80037ae:	2303      	movs	r3, #3
 80037b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80037b2:	2305      	movs	r3, #5
 80037b4:	61fb      	str	r3, [r7, #28]
	
	__GPIOF_CLK_ENABLE();		//Init of clock on pins
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	4b27      	ldr	r3, [pc, #156]	; (8003858 <LCD_SPI_Init+0xb8>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a26      	ldr	r2, [pc, #152]	; (8003858 <LCD_SPI_Init+0xb8>)
 80037c0:	f043 0320 	orr.w	r3, r3, #32
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b24      	ldr	r3, [pc, #144]	; (8003858 <LCD_SPI_Init+0xb8>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
	
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;				//Pinpack nr 1. SCK/MISO/MOSI
 80037d2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80037d6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037d8:	f107 030c 	add.w	r3, r7, #12
 80037dc:	4619      	mov	r1, r3
 80037de:	481f      	ldr	r0, [pc, #124]	; (800385c <LCD_SPI_Init+0xbc>)
 80037e0:	f7fe fb70 	bl	8001ec4 <HAL_GPIO_Init>
	
	//Init SPI
	__SPI5_CLK_ENABLE();		//Init SPI5 clock
 80037e4:	2300      	movs	r3, #0
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <LCD_SPI_Init+0xb8>)
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	4a1a      	ldr	r2, [pc, #104]	; (8003858 <LCD_SPI_Init+0xb8>)
 80037ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f2:	6453      	str	r3, [r2, #68]	; 0x44
 80037f4:	4b18      	ldr	r3, [pc, #96]	; (8003858 <LCD_SPI_Init+0xb8>)
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
	
	SPIhandle.Instance = SPI5;
 8003800:	4b17      	ldr	r3, [pc, #92]	; (8003860 <LCD_SPI_Init+0xc0>)
 8003802:	4a18      	ldr	r2, [pc, #96]	; (8003864 <LCD_SPI_Init+0xc4>)
 8003804:	601a      	str	r2, [r3, #0]
	
	SPIhandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <LCD_SPI_Init+0xc0>)
 8003808:	2220      	movs	r2, #32
 800380a:	61da      	str	r2, [r3, #28]
	SPIhandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <LCD_SPI_Init+0xc0>)
 800380e:	2200      	movs	r2, #0
 8003810:	60da      	str	r2, [r3, #12]
	SPIhandle.Init.Direction = SPI_DIRECTION_2LINES;
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <LCD_SPI_Init+0xc0>)
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]
	SPIhandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <LCD_SPI_Init+0xc0>)
 800381a:	2200      	movs	r2, #0
 800381c:	621a      	str	r2, [r3, #32]
	SPIhandle.Init.Mode= SPI_MODE_MASTER;
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <LCD_SPI_Init+0xc0>)
 8003820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003824:	605a      	str	r2, [r3, #4]
	SPIhandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <LCD_SPI_Init+0xc0>)
 8003828:	2200      	movs	r2, #0
 800382a:	611a      	str	r2, [r3, #16]
	SPIhandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <LCD_SPI_Init+0xc0>)
 800382e:	2200      	movs	r2, #0
 8003830:	615a      	str	r2, [r3, #20]
	SPIhandle.Init.NSS = SPI_NSS_SOFT;
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <LCD_SPI_Init+0xc0>)
 8003834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003838:	619a      	str	r2, [r3, #24]
	
	HAL_SPI_Init(&SPIhandle);	
 800383a:	4809      	ldr	r0, [pc, #36]	; (8003860 <LCD_SPI_Init+0xc0>)
 800383c:	f7ff f952 	bl	8002ae4 <HAL_SPI_Init>
	__HAL_SPI_ENABLE(&SPIhandle);
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <LCD_SPI_Init+0xc0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <LCD_SPI_Init+0xc0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800384e:	601a      	str	r2, [r3, #0]
}
 8003850:	bf00      	nop
 8003852:	3720      	adds	r7, #32
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40023800 	.word	0x40023800
 800385c:	40021400 	.word	0x40021400
 8003860:	20000030 	.word	0x20000030
 8003864:	40015000 	.word	0x40015000

08003868 <LCD_SPI_Send>:



uint8_t LCD_SPI_Send(uint8_t data){
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
	SPI5->DR = data;
 8003872:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <LCD_SPI_Send+0x4c>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	60d3      	str	r3, [r2, #12]
	
	while(!(SPI5->SR & SPI_SR_TXE)){
 8003878:	bf00      	nop
 800387a:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <LCD_SPI_Send+0x4c>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f9      	beq.n	800387a <LCD_SPI_Send+0x12>
		;
	}
	while(!(SPI5->SR & SPI_SR_RXNE)){
 8003886:	bf00      	nop
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <LCD_SPI_Send+0x4c>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f9      	beq.n	8003888 <LCD_SPI_Send+0x20>
		;
	}
	while((SPI5->SR & SPI_SR_BSY)){
 8003894:	bf00      	nop
 8003896:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <LCD_SPI_Send+0x4c>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f9      	bne.n	8003896 <LCD_SPI_Send+0x2e>
		;
	}
		
	return SPI5->DR;
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <LCD_SPI_Send+0x4c>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	b2db      	uxtb	r3, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40015000 	.word	0x40015000

080038b8 <LCD_SPI_IncBaudrate>:

void LCD_SPI_IncBaudrate(void){
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
	__HAL_SPI_DISABLE(&SPIhandle);
 80038bc:	4b18      	ldr	r3, [pc, #96]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	4b17      	ldr	r3, [pc, #92]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ca:	601a      	str	r2, [r3, #0]
	
	SPIhandle.Instance = SPI5;
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 80038ce:	4a15      	ldr	r2, [pc, #84]	; (8003924 <LCD_SPI_IncBaudrate+0x6c>)
 80038d0:	601a      	str	r2, [r3, #0]
	
	SPIhandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	61da      	str	r2, [r3, #28]
	SPIhandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 80038da:	2200      	movs	r2, #0
 80038dc:	60da      	str	r2, [r3, #12]
	SPIhandle.Init.Direction = SPI_DIRECTION_2LINES;
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
	SPIhandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038e4:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	621a      	str	r2, [r3, #32]
	SPIhandle.Init.Mode= SPI_MODE_MASTER;
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 80038ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038f0:	605a      	str	r2, [r3, #4]
	SPIhandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
	SPIhandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	615a      	str	r2, [r3, #20]
	SPIhandle.Init.NSS = SPI_NSS_SOFT;
 80038fe:	4b08      	ldr	r3, [pc, #32]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 8003900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003904:	619a      	str	r2, [r3, #24]
	
	HAL_SPI_Init(&SPIhandle);
 8003906:	4806      	ldr	r0, [pc, #24]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 8003908:	f7ff f8ec 	bl	8002ae4 <HAL_SPI_Init>
	__HAL_SPI_ENABLE(&SPIhandle);
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b03      	ldr	r3, [pc, #12]	; (8003920 <LCD_SPI_IncBaudrate+0x68>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391a:	601a      	str	r2, [r3, #0]
}
 800391c:	bf00      	nop
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000030 	.word	0x20000030
 8003924:	40015000 	.word	0x40015000

08003928 <drawGUI>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void drawGUI(void) {
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af02      	add	r7, sp, #8
	//Draw rectangle around screen

	LCD_Fill(ILI9341_COLOR_BLACK);
 800392e:	2000      	movs	r0, #0
 8003930:	f7ff fcce 	bl	80032d0 <LCD_Fill>
	LCD_DrawRectangle(0, 0, ILI9341_HEIGHT, ILI9341_WIDTH, ILI9341_COLOR_BLUE);
 8003934:	231f      	movs	r3, #31
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	23f0      	movs	r3, #240	; 0xf0
 800393a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800393e:	2100      	movs	r1, #0
 8003940:	2000      	movs	r0, #0
 8003942:	f7ff fef5 	bl	8003730 <LCD_DrawRectangle>
	//Draw dots on LCD
	//The differences need to be at least 15!!!!
	for(int i = (ILI9341_HEIGHT - 2) / 2, j = (ILI9341_HEIGHT - 2) / 2; i < ILI9341_HEIGHT || j > 0; i+=xGridOffset,j-=xGridOffset) {
 8003946:	239f      	movs	r3, #159	; 0x9f
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	239f      	movs	r3, #159	; 0x9f
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	e051      	b.n	80039f4 <drawGUI+0xcc>
		if(i<ILI9341_HEIGHT) {
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003956:	da21      	bge.n	800399c <drawGUI+0x74>
			//DRAW DOT ON LCD - i
			LCD_DrawPixel(i, (ILI9341_WIDTH - 2) / 2, ILI9341_COLOR_BLUE);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	b29b      	uxth	r3, r3
 800395c:	221f      	movs	r2, #31
 800395e:	2177      	movs	r1, #119	; 0x77
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fd43 	bl	80033ec <LCD_DrawPixel>
			if(i%(5*xGridOffset)) {
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4b5e      	ldr	r3, [pc, #376]	; (8003ae4 <drawGUI+0x1bc>)
 800396a:	fb83 1302 	smull	r1, r3, r3, r2
 800396e:	1119      	asrs	r1, r3, #4
 8003970:	17d3      	asrs	r3, r2, #31
 8003972:	1acb      	subs	r3, r1, r3
 8003974:	2196      	movs	r1, #150	; 0x96
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <drawGUI+0x74>
				//DRAW THICKER LINE ON LCD
				LCD_DrawPixel(i, (ILI9341_WIDTH - 2) / 2 - 1, ILI9341_COLOR_BLUE);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	b29b      	uxth	r3, r3
 8003984:	221f      	movs	r2, #31
 8003986:	2176      	movs	r1, #118	; 0x76
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff fd2f 	bl	80033ec <LCD_DrawPixel>
				LCD_DrawPixel(i, (ILI9341_WIDTH - 2) / 2 + 1, ILI9341_COLOR_BLUE);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	b29b      	uxth	r3, r3
 8003992:	221f      	movs	r2, #31
 8003994:	2178      	movs	r1, #120	; 0x78
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fd28 	bl	80033ec <LCD_DrawPixel>
			}
		}
		if(j>0) {
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	dd22      	ble.n	80039e8 <drawGUI+0xc0>
			//DRAW DOT ON LCD - j
			LCD_DrawPixel(j, (ILI9341_WIDTH - 2) / 2, ILI9341_COLOR_BLUE);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	221f      	movs	r2, #31
 80039a8:	2177      	movs	r1, #119	; 0x77
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fd1e 	bl	80033ec <LCD_DrawPixel>
			if(j%(10*xGridOffset)) {
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	4b4c      	ldr	r3, [pc, #304]	; (8003ae4 <drawGUI+0x1bc>)
 80039b4:	fb83 1302 	smull	r1, r3, r3, r2
 80039b8:	1159      	asrs	r1, r3, #5
 80039ba:	17d3      	asrs	r3, r2, #31
 80039bc:	1acb      	subs	r3, r1, r3
 80039be:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00d      	beq.n	80039e8 <drawGUI+0xc0>
				//DRAW THICKER LINE ON LCD
				LCD_DrawPixel(j, (ILI9341_WIDTH - 2) / 2 - 1, ILI9341_COLOR_BLUE);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	221f      	movs	r2, #31
 80039d2:	2176      	movs	r1, #118	; 0x76
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fd09 	bl	80033ec <LCD_DrawPixel>
				LCD_DrawPixel(j, (ILI9341_WIDTH - 2) / 2 + 1, ILI9341_COLOR_BLUE);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	221f      	movs	r2, #31
 80039e0:	2178      	movs	r1, #120	; 0x78
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fd02 	bl	80033ec <LCD_DrawPixel>
	for(int i = (ILI9341_HEIGHT - 2) / 2, j = (ILI9341_HEIGHT - 2) / 2; i < ILI9341_HEIGHT || j > 0; i+=xGridOffset,j-=xGridOffset) {
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	331e      	adds	r3, #30
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	3b1e      	subs	r3, #30
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80039fa:	dba9      	blt.n	8003950 <drawGUI+0x28>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	dca6      	bgt.n	8003950 <drawGUI+0x28>
			}
		}
	}
	for(int i = (ILI9341_WIDTH - 2) / 2, j = (ILI9341_WIDTH - 2) / 2; i < ILI9341_WIDTH || j > 0; i+=yGridOffset,j-=yGridOffset) {
 8003a02:	2377      	movs	r3, #119	; 0x77
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	2377      	movs	r3, #119	; 0x77
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	e04f      	b.n	8003aac <drawGUI+0x184>
			if(i<ILI9341_WIDTH) {
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2bef      	cmp	r3, #239	; 0xef
 8003a10:	dc21      	bgt.n	8003a56 <drawGUI+0x12e>
				//DRAW DOT ON LCD - i
				LCD_DrawPixel((ILI9341_HEIGHT - 2) / 2, i, ILI9341_COLOR_BLUE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	221f      	movs	r2, #31
 8003a18:	4619      	mov	r1, r3
 8003a1a:	209f      	movs	r0, #159	; 0x9f
 8003a1c:	f7ff fce6 	bl	80033ec <LCD_DrawPixel>
				if(i%(10*yGridOffset)) {
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4b31      	ldr	r3, [pc, #196]	; (8003ae8 <drawGUI+0x1c0>)
 8003a24:	fb83 1302 	smull	r1, r3, r3, r2
 8003a28:	1119      	asrs	r1, r3, #4
 8003a2a:	17d3      	asrs	r3, r2, #31
 8003a2c:	1acb      	subs	r3, r1, r3
 8003a2e:	21fa      	movs	r1, #250	; 0xfa
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <drawGUI+0x12e>
					//DRAW THICKER LINE ON LCD
					LCD_DrawPixel((ILI9341_HEIGHT - 2) / 2 - 1, i, ILI9341_COLOR_BLUE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	221f      	movs	r2, #31
 8003a40:	4619      	mov	r1, r3
 8003a42:	209e      	movs	r0, #158	; 0x9e
 8003a44:	f7ff fcd2 	bl	80033ec <LCD_DrawPixel>
					LCD_DrawPixel((ILI9341_HEIGHT - 2) / 2 + 1, i, ILI9341_COLOR_BLUE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	221f      	movs	r2, #31
 8003a4e:	4619      	mov	r1, r3
 8003a50:	20a0      	movs	r0, #160	; 0xa0
 8003a52:	f7ff fccb 	bl	80033ec <LCD_DrawPixel>
				}
			}
			if(j>0) {
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	dd21      	ble.n	8003aa0 <drawGUI+0x178>
				//DRAW DOT ON LCD - j
				LCD_DrawPixel(159, j, ILI9341_COLOR_BLUE);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	221f      	movs	r2, #31
 8003a62:	4619      	mov	r1, r3
 8003a64:	209f      	movs	r0, #159	; 0x9f
 8003a66:	f7ff fcc1 	bl	80033ec <LCD_DrawPixel>
				if(j%(10*yGridOffset)) {
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <drawGUI+0x1c0>)
 8003a6e:	fb83 1302 	smull	r1, r3, r3, r2
 8003a72:	1119      	asrs	r1, r3, #4
 8003a74:	17d3      	asrs	r3, r2, #31
 8003a76:	1acb      	subs	r3, r1, r3
 8003a78:	21fa      	movs	r1, #250	; 0xfa
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <drawGUI+0x178>
					//DRAW THICKER LINE ON LCD
					LCD_DrawPixel((ILI9341_HEIGHT - 2) / 2 - 1, j, ILI9341_COLOR_BLUE);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	221f      	movs	r2, #31
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	209e      	movs	r0, #158	; 0x9e
 8003a8e:	f7ff fcad 	bl	80033ec <LCD_DrawPixel>
					LCD_DrawPixel((ILI9341_HEIGHT - 2) / 2 + 1, j, ILI9341_COLOR_BLUE);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	221f      	movs	r2, #31
 8003a98:	4619      	mov	r1, r3
 8003a9a:	20a0      	movs	r0, #160	; 0xa0
 8003a9c:	f7ff fca6 	bl	80033ec <LCD_DrawPixel>
	for(int i = (ILI9341_WIDTH - 2) / 2, j = (ILI9341_WIDTH - 2) / 2; i < ILI9341_WIDTH || j > 0; i+=yGridOffset,j-=yGridOffset) {
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3319      	adds	r3, #25
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	3b19      	subs	r3, #25
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2bef      	cmp	r3, #239	; 0xef
 8003ab0:	ddac      	ble.n	8003a0c <drawGUI+0xe4>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	dca9      	bgt.n	8003a0c <drawGUI+0xe4>
				}
			}
		}
	LCD_Puts(1, 2, "Time base:", &LCD_Font_7x10, ILI9341_COLOR_WHITE);
 8003ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <drawGUI+0x1c4>)
 8003ac0:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <drawGUI+0x1c8>)
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	f7ff fcb3 	bl	8003430 <LCD_Puts>
	LCD_Puts(1, 12, "V/div:", &LCD_Font_7x10, ILI9341_COLOR_WHITE);
 8003aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <drawGUI+0x1c4>)
 8003ad2:	4a08      	ldr	r2, [pc, #32]	; (8003af4 <drawGUI+0x1cc>)
 8003ad4:	210c      	movs	r1, #12
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7ff fcaa 	bl	8003430 <LCD_Puts>
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	1b4e81b5 	.word	0x1b4e81b5
 8003ae8:	10624dd3 	.word	0x10624dd3
 8003aec:	20000008 	.word	0x20000008
 8003af0:	08004020 	.word	0x08004020
 8003af4:	0800402c 	.word	0x0800402c

08003af8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	if(hadc == ADC1) {
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <HAL_ADC_ConvCpltCallback+0x78>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d125      	bne.n	8003b54 <HAL_ADC_ConvCpltCallback+0x5c>
		//Convert ADC value to signed value representing input voltage
		voltageValue = ADCvalue * 3.3 / 4096 - 3.3 / 2; //bipolar voltage that comes to INPUT
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fc fcc1 	bl	8000494 <__aeabi_i2d>
 8003b12:	a313      	add	r3, pc, #76	; (adr r3, 8003b60 <HAL_ADC_ConvCpltCallback+0x68>)
 8003b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b18:	f7fc fd26 	bl	8000568 <__aeabi_dmul>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	460c      	mov	r4, r1
 8003b20:	4618      	mov	r0, r3
 8003b22:	4621      	mov	r1, r4
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_ADC_ConvCpltCallback+0x80>)
 8003b2a:	f7fc fe47 	bl	80007bc <__aeabi_ddiv>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	4618      	mov	r0, r3
 8003b34:	4621      	mov	r1, r4
 8003b36:	a30c      	add	r3, pc, #48	; (adr r3, 8003b68 <HAL_ADC_ConvCpltCallback+0x70>)
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f7fc fb5c 	bl	80001f8 <__aeabi_dsub>
 8003b40:	4603      	mov	r3, r0
 8003b42:	460c      	mov	r4, r1
 8003b44:	4618      	mov	r0, r3
 8003b46:	4621      	mov	r1, r4
 8003b48:	f7fc ff20 	bl	800098c <__aeabi_d2iz>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	b21a      	sxth	r2, r3
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_ADC_ConvCpltCallback+0x84>)
 8003b52:	801a      	strh	r2, [r3, #0]
	}
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd90      	pop	{r4, r7, pc}
 8003b5c:	f3af 8000 	nop.w
 8003b60:	66666666 	.word	0x66666666
 8003b64:	400a6666 	.word	0x400a6666
 8003b68:	66666666 	.word	0x66666666
 8003b6c:	3ffa6666 	.word	0x3ffa6666
 8003b70:	40012000 	.word	0x40012000
 8003b74:	20000088 	.word	0x20000088
 8003b78:	40b00000 	.word	0x40b00000
 8003b7c:	2000008a 	.word	0x2000008a

08003b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b84:	f7fd f8aa 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b88:	f000 f81e 	bl	8003bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b8c:	f7ff f900 	bl	8002d90 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b90:	f7ff f8d6 	bl	8002d40 <MX_DMA_Init>
  MX_ADC1_Init();
 8003b94:	f7ff f80a 	bl	8002bac <MX_ADC1_Init>
  MX_SPI5_Init();
 8003b98:	f000 f88e 	bl	8003cb8 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,ADCvalue,1);
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <main+0x40>)
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4807      	ldr	r0, [pc, #28]	; (8003bc4 <main+0x44>)
 8003ba6:	f7fd f94f 	bl	8000e48 <HAL_ADC_Start_DMA>
  LCD_SPI_IncBaudrate();
 8003baa:	f7ff fe85 	bl	80038b8 <LCD_SPI_IncBaudrate>
  LCD_Init();
 8003bae:	f7ff f94d 	bl	8002e4c <LCD_Init>
  LCD_Rotate(3);
 8003bb2:	2003      	movs	r0, #3
 8003bb4:	f7ff fbd6 	bl	8003364 <LCD_Rotate>
  drawGUI();
 8003bb8:	f7ff feb6 	bl	8003928 <drawGUI>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003bbc:	e7fe      	b.n	8003bbc <main+0x3c>
 8003bbe:	bf00      	nop
 8003bc0:	20000088 	.word	0x20000088
 8003bc4:	20000090 	.word	0x20000090

08003bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b094      	sub	sp, #80	; 0x50
 8003bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bce:	f107 0320 	add.w	r3, r7, #32
 8003bd2:	2230      	movs	r2, #48	; 0x30
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fa0e 	bl	8003ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bdc:	f107 030c 	add.w	r3, r7, #12
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bec:	2300      	movs	r3, #0
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <SystemClock_Config+0xd8>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <SystemClock_Config+0xd8>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfc:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <SystemClock_Config+0xd8>)
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <SystemClock_Config+0xdc>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a24      	ldr	r2, [pc, #144]	; (8003ca4 <SystemClock_Config+0xdc>)
 8003c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <SystemClock_Config+0xdc>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c24:	2302      	movs	r3, #2
 8003c26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c30:	2302      	movs	r3, #2
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c34:	2300      	movs	r3, #0
 8003c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c38:	2308      	movs	r3, #8
 8003c3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003c3c:	23b4      	movs	r3, #180	; 0xb4
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c40:	2302      	movs	r3, #2
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003c44:	2304      	movs	r3, #4
 8003c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c48:	f107 0320 	add.w	r3, r7, #32
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fb4d 	bl	80022ec <HAL_RCC_OscConfig>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003c58:	f000 f826 	bl	8003ca8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003c5c:	f7fe faf6 	bl	800224c <HAL_PWREx_EnableOverDrive>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003c66:	f000 f81f 	bl	8003ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c6a:	230f      	movs	r3, #15
 8003c6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c82:	f107 030c 	add.w	r3, r7, #12
 8003c86:	2105      	movs	r1, #5
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe fd71 	bl	8002770 <HAL_RCC_ClockConfig>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003c94:	f000 f808 	bl	8003ca8 <Error_Handler>
  }
}
 8003c98:	bf00      	nop
 8003c9a:	3750      	adds	r7, #80	; 0x50
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40007000 	.word	0x40007000

08003ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <MX_SPI5_Init>:
SPI_HandleTypeDef hspi5;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003cbe:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <MX_SPI5_Init+0x68>)
 8003cc0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003cc2:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003cc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cc8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ce8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003cec:	2220      	movs	r2, #32
 8003cee:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003d04:	220a      	movs	r2, #10
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003d08:	4804      	ldr	r0, [pc, #16]	; (8003d1c <MX_SPI5_Init+0x64>)
 8003d0a:	f7fe feeb 	bl	8002ae4 <HAL_SPI_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003d14:	f7ff ffc8 	bl	8003ca8 <Error_Handler>
  }

}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000144 	.word	0x20000144
 8003d20:	40015000 	.word	0x40015000

08003d24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a31      	ldr	r2, [pc, #196]	; (8003e08 <HAL_SPI_MspInit+0xe4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d15c      	bne.n	8003e00 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <HAL_SPI_MspInit+0xe8>)
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	4a2f      	ldr	r2, [pc, #188]	; (8003e0c <HAL_SPI_MspInit+0xe8>)
 8003d50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d54:	6453      	str	r3, [r2, #68]	; 0x44
 8003d56:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <HAL_SPI_MspInit+0xe8>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <HAL_SPI_MspInit+0xe8>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a28      	ldr	r2, [pc, #160]	; (8003e0c <HAL_SPI_MspInit+0xe8>)
 8003d6c:	f043 0320 	orr.w	r3, r3, #32
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <HAL_SPI_MspInit+0xe8>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003d7e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d84:	2302      	movs	r3, #2
 8003d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003d90:	2305      	movs	r3, #5
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	4619      	mov	r1, r3
 8003d9a:	481d      	ldr	r0, [pc, #116]	; (8003e10 <HAL_SPI_MspInit+0xec>)
 8003d9c:	f7fe f892 	bl	8001ec4 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8003da0:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003da2:	4a1d      	ldr	r2, [pc, #116]	; (8003e18 <HAL_SPI_MspInit+0xf4>)
 8003da4:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8003da6:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003da8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003dac:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dae:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003db0:	2240      	movs	r2, #64	; 0x40
 8003db2:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003db4:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dba:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dc0:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc8:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003dcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dd0:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8003de4:	480b      	ldr	r0, [pc, #44]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003de6:	f7fd fcf7 	bl	80017d8 <HAL_DMA_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8003df0:	f7ff ff5a 	bl	8003ca8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003df8:	649a      	str	r2, [r3, #72]	; 0x48
 8003dfa:	4a06      	ldr	r2, [pc, #24]	; (8003e14 <HAL_SPI_MspInit+0xf0>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003e00:	bf00      	nop
 8003e02:	3728      	adds	r7, #40	; 0x28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40015000 	.word	0x40015000
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40021400 	.word	0x40021400
 8003e14:	2000019c 	.word	0x2000019c
 8003e18:	40026470 	.word	0x40026470

08003e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_MspInit+0x4c>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	4a0f      	ldr	r2, [pc, #60]	; (8003e68 <HAL_MspInit+0x4c>)
 8003e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e30:	6453      	str	r3, [r2, #68]	; 0x44
 8003e32:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <HAL_MspInit+0x4c>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <HAL_MspInit+0x4c>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <HAL_MspInit+0x4c>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_MspInit+0x4c>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800

08003e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e7e:	e7fe      	b.n	8003e7e <HardFault_Handler+0x4>

08003e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e84:	e7fe      	b.n	8003e84 <MemManage_Handler+0x4>

08003e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e86:	b480      	push	{r7}
 8003e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e8a:	e7fe      	b.n	8003e8a <BusFault_Handler+0x4>

08003e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e90:	e7fe      	b.n	8003e90 <UsageFault_Handler+0x4>

08003e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e92:	b480      	push	{r7}
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ec0:	f7fc ff5e 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ecc:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <DMA2_Stream0_IRQHandler+0x10>)
 8003ece:	f7fd fd91 	bl	80019f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200000d8 	.word	0x200000d8

08003edc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8003ee0:	4802      	ldr	r0, [pc, #8]	; (8003eec <DMA2_Stream4_IRQHandler+0x10>)
 8003ee2:	f7fd fd87 	bl	80019f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	2000019c 	.word	0x2000019c

08003ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ef4:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <SystemInit+0x60>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <SystemInit+0x60>)
 8003efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003f04:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <SystemInit+0x64>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <SystemInit+0x64>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <SystemInit+0x64>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <SystemInit+0x64>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <SystemInit+0x64>)
 8003f1c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <SystemInit+0x64>)
 8003f28:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <SystemInit+0x68>)
 8003f2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <SystemInit+0x64>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <SystemInit+0x64>)
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <SystemInit+0x64>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <SystemInit+0x60>)
 8003f40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f44:	609a      	str	r2, [r3, #8]
#endif
}
 8003f46:	bf00      	nop
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	e000ed00 	.word	0xe000ed00
 8003f54:	40023800 	.word	0x40023800
 8003f58:	24003010 	.word	0x24003010

08003f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f94 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f62:	e003      	b.n	8003f6c <LoopCopyDataInit>

08003f64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f6a:	3104      	adds	r1, #4

08003f6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f6c:	480b      	ldr	r0, [pc, #44]	; (8003f9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f74:	d3f6      	bcc.n	8003f64 <CopyDataInit>
  ldr  r2, =_sbss
 8003f76:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f78:	e002      	b.n	8003f80 <LoopFillZerobss>

08003f7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f7c:	f842 3b04 	str.w	r3, [r2], #4

08003f80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f84:	d3f9      	bcc.n	8003f7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f86:	f7ff ffb3 	bl	8003ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f8a:	f000 f811 	bl	8003fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f8e:	f7ff fdf7 	bl	8003b80 <main>
  bx  lr    
 8003f92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003f94:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003f98:	080047c8 	.word	0x080047c8
  ldr  r0, =_sdata
 8003f9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fa0:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8003fa4:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8003fa8:	200001fc 	.word	0x200001fc

08003fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fac:	e7fe      	b.n	8003fac <ADC_IRQHandler>
	...

08003fb0 <__libc_init_array>:
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	4e0d      	ldr	r6, [pc, #52]	; (8003fe8 <__libc_init_array+0x38>)
 8003fb4:	4c0d      	ldr	r4, [pc, #52]	; (8003fec <__libc_init_array+0x3c>)
 8003fb6:	1ba4      	subs	r4, r4, r6
 8003fb8:	10a4      	asrs	r4, r4, #2
 8003fba:	2500      	movs	r5, #0
 8003fbc:	42a5      	cmp	r5, r4
 8003fbe:	d109      	bne.n	8003fd4 <__libc_init_array+0x24>
 8003fc0:	4e0b      	ldr	r6, [pc, #44]	; (8003ff0 <__libc_init_array+0x40>)
 8003fc2:	4c0c      	ldr	r4, [pc, #48]	; (8003ff4 <__libc_init_array+0x44>)
 8003fc4:	f000 f820 	bl	8004008 <_init>
 8003fc8:	1ba4      	subs	r4, r4, r6
 8003fca:	10a4      	asrs	r4, r4, #2
 8003fcc:	2500      	movs	r5, #0
 8003fce:	42a5      	cmp	r5, r4
 8003fd0:	d105      	bne.n	8003fde <__libc_init_array+0x2e>
 8003fd2:	bd70      	pop	{r4, r5, r6, pc}
 8003fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fd8:	4798      	blx	r3
 8003fda:	3501      	adds	r5, #1
 8003fdc:	e7ee      	b.n	8003fbc <__libc_init_array+0xc>
 8003fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fe2:	4798      	blx	r3
 8003fe4:	3501      	adds	r5, #1
 8003fe6:	e7f2      	b.n	8003fce <__libc_init_array+0x1e>
 8003fe8:	080047c0 	.word	0x080047c0
 8003fec:	080047c0 	.word	0x080047c0
 8003ff0:	080047c0 	.word	0x080047c0
 8003ff4:	080047c4 	.word	0x080047c4

08003ff8 <memset>:
 8003ff8:	4402      	add	r2, r0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d100      	bne.n	8004002 <memset+0xa>
 8004000:	4770      	bx	lr
 8004002:	f803 1b01 	strb.w	r1, [r3], #1
 8004006:	e7f9      	b.n	8003ffc <memset+0x4>

08004008 <_init>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr

08004014 <_fini>:
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	bf00      	nop
 8004018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401a:	bc08      	pop	{r3}
 800401c:	469e      	mov	lr, r3
 800401e:	4770      	bx	lr
